/* tslint:disable no-console */
import FormData from 'form-data'
import fs from 'fs'
import fetch from 'node-fetch'
import path from 'path'
import Web3 from 'web3'

/*
 * A script that reads the artifacts from the build/contracts directory and publish using the sourcify api.
 *
 * NOTE: this script hasn't been tested yet. It should be manually tested and
 * potentially adjusted before including it in the release process.
 *
 * Expects the following flags:
 *   network: The network for which artifacts should be
 *   build_artifacts_path: Path containing the artifacts to publish
 *   proposal_path: Path to the proposal file
 *
 * Run using yarn run sourcify-publish, e.g.:
 * yarn run sourcify-publish \
 *   --network alfajores --build_artifacts_path ./build/contracts --proposal_path ./proposal.json
 *
 * report.json is generated by the build script with this format:
 *  [{
 *  "contract": "<Contract>Proxy",
 *  "function": "_setImplementation",
 *  "args": "[<Contract>]",
 *    },{
 *  "contract": "Registry",
 *  "function": "setAddressFor",
 *  "args": ["<Contract>", "<ContractProxy address>"]
 *  }]
 *
 */

const _buildTargets = {
  network: undefined,
  build_artifacts_path: undefined,
  proposal_path: undefined,
}

async function main(buildTargets: typeof _buildTargets) {
  const artifactBasePath = buildTargets.build_artifacts_path || './build/contracts'
  const artifactPaths = fs.readdirSync(artifactBasePath)
  const reportPath = buildTargets.proposal_path || './proposal.json'
  const report = require(path.join(process.cwd(), reportPath))
  const network = buildTargets.network
  const web3 = new Web3('http://localhost:8545')
  const chainId = await web3.eth.getChainId()

  console.log('Uploading sources & metadata')
  console.log('============================')

  const artifacts = artifactPaths.map((a) => require(path.join(process.cwd(), artifactBasePath, a)))

  for (const r of report) {
    const artifact = artifacts.find((a) => a.contractName === r.contract)

    console.log()
    console.log(artifact.contractName)
    console.log('-'.repeat(artifact.contractName.length))

    const address = r.contract.includes('Proxy') ? r.args[0] : r.args[1]
    const implementationName = r.contract.includes('Proxy')
      ? artifact.contractName.replace('Proxy', '')
      : artifact.contractName

    const formData = new FormData()
    formData.append(
      'files',
      fs.createReadStream(artifactBasePath + '/' + implementationName + '.json')
    )
    formData.append('address', address)
    formData.append('chain', chainId)

    const mainContract = artifacts.find((a) => a.contractName === implementationName)
    const sourcesfilesNeeded = Object.keys(JSON.parse(mainContract.metadata).sources)

    const p = sourcesfilesNeeded.find((f) => f.includes(implementationName))
    // Interface contract needs the parent implementation as well
    if (p.endsWith('BRL.sol')) {
      const e = p.replace('BRL.sol', '.sol')
      formData.append('files', fs.createReadStream('.' + e.split('protocol')[1]))
    }
    if (p.endsWith('USD.sol')) {
      const e = p.replace('USD.sol', '.sol')
      formData.append('files', fs.createReadStream('.' + e.split('protocol')[1]))
    }
    if (p.endsWith('EUR.sol')) {
      const e = p.replace('EUR.sol', '.sol')
      formData.append('files', fs.createReadStream('.' + e.split('protocol')[1]))
    }
    formData.append('files', fs.createReadStream('.' + p.split('protocol')[1]))

    try {
      await fetch('https://sourcify.dev/server', {
        method: 'POST',
        body: formData,
      })
        .then((res) => res.json())
        .then((json) => {
          if (!json.result) throw new Error(json.error)
          if (network === 'mainnet') {
            fetch(`https://explorer.celo.org/address/${json.result[0].address}/contracts`)
          } else {
            fetch(
              `https://${network}-blockscout.celo-testnet.org/address/${json.result[0].address}/contracts`
            )
          }
        })
    } catch (error) {
      console.log(error.message)
      continue
    }
  }
  console.log('Finished.')
}

const minimist = require('minimist')
const argv = minimist(process.argv.slice(2), {
  string: ['network', 'proposal_path', 'celo_network'],
})

main(argv)
  .then(() => process.exit(0))
  .catch((err) => {
    console.log(err)
    process.exit(1)
  })
