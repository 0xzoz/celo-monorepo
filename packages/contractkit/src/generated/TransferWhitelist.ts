/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface TransferWhitelist extends Contract {
  clone(): TransferWhitelist
  methods: {
    whitelistedContractIdentifiers(arg0: number | string): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    registry(): TransactionObject<string>

    owner(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    setRegistry(registryAddress: string): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>

    whitelistAddress(newAddress: string): TransactionObject<void>

    removeAddress(removedAddress: string, index: number | string): TransactionObject<void>

    whitelistRegisteredContract(contractIdentifier: string | number[]): TransactionObject<void>

    getNumberOfWhitelistedContractIdentifiers(): TransactionObject<string>

    setDirectlyWhitelistedAddresses(_whitelist: string[]): TransactionObject<void>

    setWhitelistedContractIdentifiers(
      _registeredContracts: (string | number[])[]
    ): TransactionObject<void>

    getWhitelist(): TransactionObject<string[]>

    selfDestruct(): TransactionObject<void>
  }
  events: {
    WhitelistedAddress: ContractEvent<string>
    WhitelistedAddressRemoved: ContractEvent<string>
    WhitelistedContractIdentifier: ContractEvent<string>
    RegistrySet: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [{ name: '', type: 'uint256' }],
    name: 'whitelistedContractIdentifiers',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [{ name: 'registryAddress', type: 'address' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'addr', type: 'address' }],
    name: 'WhitelistedAddress',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'addr', type: 'address' }],
    name: 'WhitelistedAddressRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'contractIdentifier', type: 'bytes32' }],
    name: 'WhitelistedContractIdentifier',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
    name: 'RegistrySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    constant: false,
    inputs: [{ name: 'newAddress', type: 'address' }],
    name: 'whitelistAddress',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'removedAddress', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'removeAddress',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'contractIdentifier', type: 'bytes32' }],
    name: 'whitelistRegisteredContract',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getNumberOfWhitelistedContractIdentifiers',
    outputs: [{ name: 'length', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_whitelist', type: 'address[]' }],
    name: 'setDirectlyWhitelistedAddresses',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_registeredContracts', type: 'bytes32[]' }],
    name: 'setWhitelistedContractIdentifiers',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getWhitelist',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'selfDestruct',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

export function newTransferWhitelist(web3: Web3, address: string): TransferWhitelist {
  return new web3.eth.Contract(ABI, address) as any
}
