/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface Proxy extends Contract {
  clone(): Proxy
  methods: {
    _transferOwnership(newOwner: string): TransactionObject<void>

    _setAndInitializeImplementation(
      implementation: string,
      callbackData: string | number[]
    ): TransactionObject<void>

    _getImplementation(): TransactionObject<string>

    _setImplementation(implementation: string): TransactionObject<void>

    _getOwner(): TransactionObject<string>
  }
  events: {
    OwnerSet: ContractEvent<string>
    ImplementationSet: ContractEvent<string>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    inputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'owner', type: 'address' }],
    name: 'OwnerSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'implementation', type: 'address' }],
    name: 'ImplementationSet',
    type: 'event',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'implementation', type: 'address' },
      { name: 'callbackData', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
    payable: true,
    stateMutability: 'payable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'implementation', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
]

export function newProxy(web3: Web3, address: string): Proxy {
  return new web3.eth.Contract(ABI, address) as any
}
