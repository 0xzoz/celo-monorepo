/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface LockedGold extends Contract {
  clone(): LockedGold
  methods: {
    initialized(): TransactionObject<boolean>

    unlockingPeriod(): TransactionObject<string>

    slashingWhitelist(arg0: number | string): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    registry(): TransactionObject<string>

    owner(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    setRegistry(registryAddress: string): TransactionObject<void>

    totalNonvoting(): TransactionObject<string>

    transferOwnership(newOwner: string): TransactionObject<void>

    isSlasher(slasher: string): TransactionObject<boolean>

    initialize(registryAddress: string, _unlockingPeriod: number | string): TransactionObject<void>

    setUnlockingPeriod(value: number | string): TransactionObject<void>

    lock(): TransactionObject<void>

    incrementNonvotingAccountBalance(
      account: string,
      value: number | string
    ): TransactionObject<void>

    decrementNonvotingAccountBalance(
      account: string,
      value: number | string
    ): TransactionObject<void>

    unlock(value: number | string): TransactionObject<void>

    relock(index: number | string, value: number | string): TransactionObject<void>

    withdraw(index: number | string): TransactionObject<void>

    getTotalLockedGold(): TransactionObject<string>

    getNonvotingLockedGold(): TransactionObject<string>

    getAccountTotalLockedGold(account: string): TransactionObject<string>

    getAccountNonvotingLockedGold(account: string): TransactionObject<string>

    getPendingWithdrawals(
      account: string
    ): TransactionObject<{
      0: string[]
      1: string[]
    }>

    getTotalPendingWithdrawals(account: string): TransactionObject<string>

    getSlashingWhitelist(): TransactionObject<string[]>

    addSlasher(slasherIdentifier: string): TransactionObject<void>

    removeSlasher(slasherIdentifier: string, index: number | string): TransactionObject<void>

    slash(
      account: string,
      penalty: number | string,
      reporter: string,
      reward: number | string,
      lessers: string[],
      greaters: string[],
      indices: (number | string)[]
    ): TransactionObject<void>
  }
  events: {
    UnlockingPeriodSet: ContractEvent<string>
    GoldLocked: ContractEvent<{
      account: string
      value: string
      0: string
      1: string
    }>
    GoldUnlocked: ContractEvent<{
      account: string
      value: string
      available: string
      0: string
      1: string
      2: string
    }>
    GoldRelocked: ContractEvent<{
      account: string
      value: string
      0: string
      1: string
    }>
    GoldWithdrawn: ContractEvent<{
      account: string
      value: string
      0: string
      1: string
    }>
    SlasherWhitelistAdded: ContractEvent<string>
    SlasherWhitelistRemoved: ContractEvent<string>
    AccountSlashed: ContractEvent<{
      slashed: string
      penalty: string
      reporter: string
      reward: string
      0: string
      1: string
      2: string
      3: string
    }>
    RegistrySet: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'unlockingPeriod',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'uint256' }],
    name: 'slashingWhitelist',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'totalNonvoting',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'period', type: 'uint256' }],
    name: 'UnlockingPeriodSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'GoldLocked',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
      { indexed: false, name: 'available', type: 'uint256' },
    ],
    name: 'GoldUnlocked',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'GoldRelocked',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'GoldWithdrawn',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'slasherIdentifier', type: 'string' }],
    name: 'SlasherWhitelistAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'slasherIdentifier', type: 'string' }],
    name: 'SlasherWhitelistRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'slashed', type: 'address' },
      { indexed: false, name: 'penalty', type: 'uint256' },
      { indexed: true, name: 'reporter', type: 'address' },
      { indexed: false, name: 'reward', type: 'uint256' },
    ],
    name: 'AccountSlashed',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
    name: 'RegistrySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    constant: true,
    inputs: [{ name: 'slasher', type: 'address' }],
    name: 'isSlasher',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'registryAddress', type: 'address' },
      { name: '_unlockingPeriod', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'value', type: 'uint256' }],
    name: 'setUnlockingPeriod',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'lock',
    outputs: [],
    payable: true,
    stateMutability: 'payable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'account', type: 'address' },
      { name: 'value', type: 'uint256' },
    ],
    name: 'incrementNonvotingAccountBalance',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'account', type: 'address' },
      { name: 'value', type: 'uint256' },
    ],
    name: 'decrementNonvotingAccountBalance',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'value', type: 'uint256' }],
    name: 'unlock',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'index', type: 'uint256' },
      { name: 'value', type: 'uint256' },
    ],
    name: 'relock',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'index', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getTotalLockedGold',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getNonvotingLockedGold',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getAccountTotalLockedGold',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getAccountNonvotingLockedGold',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getPendingWithdrawals',
    outputs: [
      { name: '', type: 'uint256[]' },
      { name: '', type: 'uint256[]' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getTotalPendingWithdrawals',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getSlashingWhitelist',
    outputs: [{ name: '', type: 'bytes32[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'slasherIdentifier', type: 'string' }],
    name: 'addSlasher',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'slasherIdentifier', type: 'string' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'removeSlasher',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'account', type: 'address' },
      { name: 'penalty', type: 'uint256' },
      { name: 'reporter', type: 'address' },
      { name: 'reward', type: 'uint256' },
      { name: 'lessers', type: 'address[]' },
      { name: 'greaters', type: 'address[]' },
      { name: 'indices', type: 'uint256[]' },
    ],
    name: 'slash',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

export function newLockedGold(web3: Web3, address: string): LockedGold {
  return new web3.eth.Contract(ABI, address) as any
}
