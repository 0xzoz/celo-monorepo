/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface Escrow extends Contract {
  clone(): Escrow
  methods: {
    initialized(): TransactionObject<boolean>

    escrowedPayments(
      arg0: string
    ): TransactionObject<{
      recipientIdentifier: string
      sender: string
      token: string
      value: string
      sentIndex: string
      receivedIndex: string
      timestamp: string
      expirySeconds: string
      minAttestations: string
      0: string
      1: string
      2: string
      3: string
      4: string
      5: string
      6: string
      7: string
      8: string
    }>

    renounceOwnership(): TransactionObject<void>

    registry(): TransactionObject<string>

    owner(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    receivedPaymentIds(arg0: string | number[], arg1: number | string): TransactionObject<string>

    setRegistry(registryAddress: string): TransactionObject<void>

    sentPaymentIds(arg0: string, arg1: number | string): TransactionObject<string>

    transferOwnership(newOwner: string): TransactionObject<void>

    initialize(registryAddress: string): TransactionObject<void>

    transfer(
      identifier: string | number[],
      token: string,
      value: number | string,
      expirySeconds: number | string,
      paymentId: string,
      minAttestations: number | string
    ): TransactionObject<boolean>

    withdraw(
      paymentId: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<boolean>

    revoke(paymentId: string): TransactionObject<boolean>

    getReceivedPaymentIds(identifier: string | number[]): TransactionObject<string[]>

    getSentPaymentIds(sender: string): TransactionObject<string[]>
  }
  events: {
    Transfer: ContractEvent<{
      from: string
      identifier: string
      token: string
      value: string
      paymentId: string
      minAttestations: string
      0: string
      1: string
      2: string
      3: string
      4: string
      5: string
    }>
    Withdrawal: ContractEvent<{
      identifier: string
      to: string
      token: string
      value: string
      paymentId: string
      0: string
      1: string
      2: string
      3: string
      4: string
    }>
    Revocation: ContractEvent<{
      identifier: string
      by: string
      token: string
      value: string
      paymentId: string
      0: string
      1: string
      2: string
      3: string
      4: string
    }>
    RegistrySet: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'escrowedPayments',
    outputs: [
      { name: 'recipientIdentifier', type: 'bytes32' },
      { name: 'sender', type: 'address' },
      { name: 'token', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'sentIndex', type: 'uint256' },
      { name: 'receivedIndex', type: 'uint256' },
      { name: 'timestamp', type: 'uint256' },
      { name: 'expirySeconds', type: 'uint256' },
      { name: 'minAttestations', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: '', type: 'bytes32' },
      { name: '', type: 'uint256' },
    ],
    name: 'receivedPaymentIds',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: '', type: 'address' },
      { name: '', type: 'uint256' },
    ],
    name: 'sentPaymentIds',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'from', type: 'address' },
      { indexed: true, name: 'identifier', type: 'bytes32' },
      { indexed: true, name: 'token', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
      { indexed: false, name: 'paymentId', type: 'address' },
      { indexed: false, name: 'minAttestations', type: 'uint256' },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'identifier', type: 'bytes32' },
      { indexed: true, name: 'to', type: 'address' },
      { indexed: true, name: 'token', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
      { indexed: false, name: 'paymentId', type: 'address' },
    ],
    name: 'Withdrawal',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'identifier', type: 'bytes32' },
      { indexed: true, name: 'by', type: 'address' },
      { indexed: true, name: 'token', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
      { indexed: false, name: 'paymentId', type: 'address' },
    ],
    name: 'Revocation',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
    name: 'RegistrySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'initialize',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'identifier', type: 'bytes32' },
      { name: 'token', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'expirySeconds', type: 'uint256' },
      { name: 'paymentId', type: 'address' },
      { name: 'minAttestations', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'paymentId', type: 'address' },
      { name: 'v', type: 'uint8' },
      { name: 'r', type: 'bytes32' },
      { name: 's', type: 'bytes32' },
    ],
    name: 'withdraw',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'paymentId', type: 'address' }],
    name: 'revoke',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'identifier', type: 'bytes32' }],
    name: 'getReceivedPaymentIds',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'sender', type: 'address' }],
    name: 'getSentPaymentIds',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
]

export function newEscrow(web3: Web3, address: string): Escrow {
  return new web3.eth.Contract(ABI, address) as any
}
