/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface Governance extends Contract {
  clone(): Governance
  methods: {
    stageDurations(): TransactionObject<{
      approval: string
      referendum: string
      execution: string
      0: string
      1: string
      2: string
    }>

    concurrentProposals(): TransactionObject<string>

    validatorSignerAddressFromCurrentSet(index: number | string): TransactionObject<string>

    approver(): TransactionObject<string>

    initialized(): TransactionObject<boolean>

    checkProofOfPossession(
      sender: string,
      blsKey: string | number[],
      blsPop: string | number[]
    ): TransactionObject<boolean>

    getEpochNumberOfBlock(blockNumber: number | string): TransactionObject<string>

    minDeposit(): TransactionObject<string>

    hotfixes(
      arg0: string | number[]
    ): TransactionObject<{
      executed: boolean
      approved: boolean
      preparedEpoch: string
      0: boolean
      1: boolean
      2: string
    }>

    getVerifiedSealBitmapFromHeader(header: string | number[]): TransactionObject<string>

    validatorSignerAddressFromSet(
      index: number | string,
      blockNumber: number | string
    ): TransactionObject<string>

    refundedDeposits(arg0: string): TransactionObject<string>

    hashHeader(header: string | number[]): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    minQuorumSizeInCurrentSet(): TransactionObject<string>

    dequeueFrequency(): TransactionObject<string>

    registry(): TransactionObject<string>

    numberValidatorsInCurrentSet(): TransactionObject<string>

    getBlockNumberFromHeader(header: string | number[]): TransactionObject<string>

    owner(): TransactionObject<string>

    queueExpiry(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    getEpochNumber(): TransactionObject<string>

    numberValidatorsInSet(blockNumber: number | string): TransactionObject<string>

    setRegistry(registryAddress: string): TransactionObject<void>

    emptyIndices(arg0: number | string): TransactionObject<string>

    dequeued(arg0: number | string): TransactionObject<string>

    lastDequeue(): TransactionObject<string>

    proposalCount(): TransactionObject<string>

    getEpochSize(): TransactionObject<string>

    minQuorumSize(blockNumber: number | string): TransactionObject<string>

    fractionMulExp(
      aNumerator: number | string,
      aDenominator: number | string,
      bNumerator: number | string,
      bDenominator: number | string,
      exponent: number | string,
      _decimals: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    transferOwnership(newOwner: string): TransactionObject<void>

    getParentSealBitmap(blockNumber: number | string): TransactionObject<string>

    initialize(
      registryAddress: string,
      _approver: string,
      _concurrentProposals: number | string,
      _minDeposit: number | string,
      _queueExpiry: number | string,
      _dequeueFrequency: number | string,
      approvalStageDuration: number | string,
      referendumStageDuration: number | string,
      executionStageDuration: number | string,
      participationBaseline: number | string,
      participationFloor: number | string,
      baselineUpdateFactor: number | string,
      baselineQuorumFactor: number | string
    ): TransactionObject<void>

    setApprover(_approver: string): TransactionObject<void>

    setConcurrentProposals(_concurrentProposals: number | string): TransactionObject<void>

    setMinDeposit(_minDeposit: number | string): TransactionObject<void>

    setQueueExpiry(_queueExpiry: number | string): TransactionObject<void>

    setDequeueFrequency(_dequeueFrequency: number | string): TransactionObject<void>

    setApprovalStageDuration(approvalStageDuration: number | string): TransactionObject<void>

    setReferendumStageDuration(referendumStageDuration: number | string): TransactionObject<void>

    setExecutionStageDuration(executionStageDuration: number | string): TransactionObject<void>

    setParticipationBaseline(participationBaseline: number | string): TransactionObject<void>

    setParticipationFloor(participationFloor: number | string): TransactionObject<void>

    setBaselineUpdateFactor(baselineUpdateFactor: number | string): TransactionObject<void>

    setBaselineQuorumFactor(baselineQuorumFactor: number | string): TransactionObject<void>

    setConstitution(
      destination: string,
      functionId: string | number[],
      threshold: number | string
    ): TransactionObject<void>

    propose(
      values: (number | string)[],
      destinations: string[],
      data: string | number[],
      dataLengths: (number | string)[],
      descriptionUrl: string
    ): TransactionObject<string>

    upvote(
      proposalId: number | string,
      lesser: number | string,
      greater: number | string
    ): TransactionObject<boolean>

    getProposalStage(proposalId: number | string): TransactionObject<string>

    revokeUpvote(lesser: number | string, greater: number | string): TransactionObject<boolean>

    approve(proposalId: number | string, index: number | string): TransactionObject<boolean>

    vote(
      proposalId: number | string,
      index: number | string,
      value: number | string
    ): TransactionObject<boolean>

    execute(proposalId: number | string, index: number | string): TransactionObject<boolean>

    approveHotfix(hash: string | number[]): TransactionObject<void>

    isHotfixWhitelistedBy(hash: string | number[], whitelister: string): TransactionObject<boolean>

    whitelistHotfix(hash: string | number[]): TransactionObject<void>

    prepareHotfix(hash: string | number[]): TransactionObject<void>

    executeHotfix(
      values: (number | string)[],
      destinations: string[],
      data: string | number[],
      dataLengths: (number | string)[],
      salt: string | number[]
    ): TransactionObject<void>

    withdraw(): TransactionObject<boolean>

    isVoting(account: string): TransactionObject<boolean>

    getApprovalStageDuration(): TransactionObject<string>

    getReferendumStageDuration(): TransactionObject<string>

    getExecutionStageDuration(): TransactionObject<string>

    getParticipationParameters(): TransactionObject<{
      0: string
      1: string
      2: string
      3: string
    }>

    proposalExists(proposalId: number | string): TransactionObject<boolean>

    getProposal(
      proposalId: number | string
    ): TransactionObject<{
      0: string
      1: string
      2: string
      3: string
      4: string
    }>

    getProposalTransaction(
      proposalId: number | string,
      index: number | string
    ): TransactionObject<{
      0: string
      1: string
      2: string
    }>

    isApproved(proposalId: number | string): TransactionObject<boolean>

    getVoteTotals(
      proposalId: number | string
    ): TransactionObject<{
      0: string
      1: string
      2: string
    }>

    getVoteRecord(
      account: string,
      index: number | string
    ): TransactionObject<{
      0: string
      1: string
      2: string
    }>

    getQueueLength(): TransactionObject<string>

    getUpvotes(proposalId: number | string): TransactionObject<string>

    getQueue(): TransactionObject<{
      0: string[]
      1: string[]
    }>

    getDequeue(): TransactionObject<string[]>

    getUpvoteRecord(
      account: string
    ): TransactionObject<{
      0: string
      1: string
    }>

    getMostRecentReferendumProposal(account: string): TransactionObject<string>

    hotfixWhitelistValidatorTally(hash: string | number[]): TransactionObject<string>

    isHotfixPassing(hash: string | number[]): TransactionObject<boolean>

    getHotfixRecord(
      hash: string | number[]
    ): TransactionObject<{
      0: boolean
      1: boolean
      2: string
    }>

    dequeueProposalsIfReady(): TransactionObject<void>

    isQueued(proposalId: number | string): TransactionObject<boolean>

    isProposalPassing(proposalId: number | string): TransactionObject<boolean>

    isDequeuedProposal(
      proposalId: number | string,
      index: number | string
    ): TransactionObject<boolean>

    isDequeuedProposalExpired(proposalId: number | string): TransactionObject<boolean>

    isQueuedProposalExpired(proposalId: number | string): TransactionObject<boolean>

    getConstitution(destination: string, functionId: string | number[]): TransactionObject<string>
  }
  events: {
    ApproverSet: ContractEvent<string>
    ConcurrentProposalsSet: ContractEvent<string>
    MinDepositSet: ContractEvent<string>
    QueueExpirySet: ContractEvent<string>
    DequeueFrequencySet: ContractEvent<string>
    ApprovalStageDurationSet: ContractEvent<string>
    ReferendumStageDurationSet: ContractEvent<string>
    ExecutionStageDurationSet: ContractEvent<string>
    ConstitutionSet: ContractEvent<{
      destination: string
      functionId: string
      threshold: string
      0: string
      1: string
      2: string
    }>
    ProposalQueued: ContractEvent<{
      proposalId: string
      proposer: string
      transactionCount: string
      deposit: string
      timestamp: string
      0: string
      1: string
      2: string
      3: string
      4: string
    }>
    ProposalUpvoted: ContractEvent<{
      proposalId: string
      account: string
      upvotes: string
      0: string
      1: string
      2: string
    }>
    ProposalUpvoteRevoked: ContractEvent<{
      proposalId: string
      account: string
      revokedUpvotes: string
      0: string
      1: string
      2: string
    }>
    ProposalDequeued: ContractEvent<{
      proposalId: string
      timestamp: string
      0: string
      1: string
    }>
    ProposalApproved: ContractEvent<string>
    ProposalVoted: ContractEvent<{
      proposalId: string
      account: string
      value: string
      weight: string
      0: string
      1: string
      2: string
      3: string
    }>
    ProposalExecuted: ContractEvent<string>
    ProposalExpired: ContractEvent<string>
    ParticipationBaselineUpdated: ContractEvent<string>
    ParticipationFloorSet: ContractEvent<string>
    ParticipationBaselineUpdateFactorSet: ContractEvent<string>
    ParticipationBaselineQuorumFactorSet: ContractEvent<string>
    HotfixWhitelisted: ContractEvent<{
      hash: string
      whitelister: string
      0: string
      1: string
    }>
    HotfixApproved: ContractEvent<string>
    HotfixPrepared: ContractEvent<{
      hash: string
      epoch: string
      0: string
      1: string
    }>
    HotfixExecuted: ContractEvent<string>
    RegistrySet: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [],
    name: 'stageDurations',
    outputs: [
      { name: 'approval', type: 'uint256' },
      { name: 'referendum', type: 'uint256' },
      { name: 'execution', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'concurrentProposals',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'index', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'approver',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'blsKey', type: 'bytes' },
      { name: 'blsPop', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'minDeposit',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'bytes32' }],
    name: 'hotfixes',
    outputs: [
      { name: 'executed', type: 'bool' },
      { name: 'approved', type: 'bool' },
      { name: 'preparedEpoch', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'index', type: 'uint256' },
      { name: 'blockNumber', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'refundedDeposits',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'dequeueFrequency',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'queueExpiry',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'uint256' }],
    name: 'emptyIndices',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'uint256' }],
    name: 'dequeued',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'lastDequeue',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'aNumerator', type: 'uint256' },
      { name: 'aDenominator', type: 'uint256' },
      { name: 'bNumerator', type: 'uint256' },
      { name: 'bDenominator', type: 'uint256' },
      { name: 'exponent', type: 'uint256' },
      { name: '_decimals', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'approver', type: 'address' }],
    name: 'ApproverSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'concurrentProposals', type: 'uint256' }],
    name: 'ConcurrentProposalsSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'minDeposit', type: 'uint256' }],
    name: 'MinDepositSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'queueExpiry', type: 'uint256' }],
    name: 'QueueExpirySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'dequeueFrequency', type: 'uint256' }],
    name: 'DequeueFrequencySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'approvalStageDuration', type: 'uint256' }],
    name: 'ApprovalStageDurationSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'referendumStageDuration', type: 'uint256' }],
    name: 'ReferendumStageDurationSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'executionStageDuration', type: 'uint256' }],
    name: 'ExecutionStageDurationSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'destination', type: 'address' },
      { indexed: true, name: 'functionId', type: 'bytes4' },
      { indexed: false, name: 'threshold', type: 'uint256' },
    ],
    name: 'ConstitutionSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'proposalId', type: 'uint256' },
      { indexed: true, name: 'proposer', type: 'address' },
      { indexed: false, name: 'transactionCount', type: 'uint256' },
      { indexed: false, name: 'deposit', type: 'uint256' },
      { indexed: false, name: 'timestamp', type: 'uint256' },
    ],
    name: 'ProposalQueued',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'proposalId', type: 'uint256' },
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'upvotes', type: 'uint256' },
    ],
    name: 'ProposalUpvoted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'proposalId', type: 'uint256' },
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'revokedUpvotes', type: 'uint256' },
    ],
    name: 'ProposalUpvoteRevoked',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'proposalId', type: 'uint256' },
      { indexed: false, name: 'timestamp', type: 'uint256' },
    ],
    name: 'ProposalDequeued',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'proposalId', type: 'uint256' }],
    name: 'ProposalApproved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'proposalId', type: 'uint256' },
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
      { indexed: false, name: 'weight', type: 'uint256' },
    ],
    name: 'ProposalVoted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'proposalId', type: 'uint256' }],
    name: 'ProposalExecuted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'proposalId', type: 'uint256' }],
    name: 'ProposalExpired',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'participationBaseline', type: 'uint256' }],
    name: 'ParticipationBaselineUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'participationFloor', type: 'uint256' }],
    name: 'ParticipationFloorSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'baselineUpdateFactor', type: 'uint256' }],
    name: 'ParticipationBaselineUpdateFactorSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'baselineQuorumFactor', type: 'uint256' }],
    name: 'ParticipationBaselineQuorumFactorSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'hash', type: 'bytes32' },
      { indexed: false, name: 'whitelister', type: 'address' },
    ],
    name: 'HotfixWhitelisted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'hash', type: 'bytes32' }],
    name: 'HotfixApproved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'hash', type: 'bytes32' },
      { indexed: true, name: 'epoch', type: 'uint256' },
    ],
    name: 'HotfixPrepared',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'hash', type: 'bytes32' }],
    name: 'HotfixExecuted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
    name: 'RegistrySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    constant: false,
    inputs: [
      { name: 'registryAddress', type: 'address' },
      { name: '_approver', type: 'address' },
      { name: '_concurrentProposals', type: 'uint256' },
      { name: '_minDeposit', type: 'uint256' },
      { name: '_queueExpiry', type: 'uint256' },
      { name: '_dequeueFrequency', type: 'uint256' },
      { name: 'approvalStageDuration', type: 'uint256' },
      { name: 'referendumStageDuration', type: 'uint256' },
      { name: 'executionStageDuration', type: 'uint256' },
      { name: 'participationBaseline', type: 'uint256' },
      { name: 'participationFloor', type: 'uint256' },
      { name: 'baselineUpdateFactor', type: 'uint256' },
      { name: 'baselineQuorumFactor', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_approver', type: 'address' }],
    name: 'setApprover',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_concurrentProposals', type: 'uint256' }],
    name: 'setConcurrentProposals',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_minDeposit', type: 'uint256' }],
    name: 'setMinDeposit',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_queueExpiry', type: 'uint256' }],
    name: 'setQueueExpiry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_dequeueFrequency', type: 'uint256' }],
    name: 'setDequeueFrequency',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'approvalStageDuration', type: 'uint256' }],
    name: 'setApprovalStageDuration',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'referendumStageDuration', type: 'uint256' }],
    name: 'setReferendumStageDuration',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'executionStageDuration', type: 'uint256' }],
    name: 'setExecutionStageDuration',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'participationBaseline', type: 'uint256' }],
    name: 'setParticipationBaseline',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'participationFloor', type: 'uint256' }],
    name: 'setParticipationFloor',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'baselineUpdateFactor', type: 'uint256' }],
    name: 'setBaselineUpdateFactor',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'baselineQuorumFactor', type: 'uint256' }],
    name: 'setBaselineQuorumFactor',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'destination', type: 'address' },
      { name: 'functionId', type: 'bytes4' },
      { name: 'threshold', type: 'uint256' },
    ],
    name: 'setConstitution',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'values', type: 'uint256[]' },
      { name: 'destinations', type: 'address[]' },
      { name: 'data', type: 'bytes' },
      { name: 'dataLengths', type: 'uint256[]' },
      { name: 'descriptionUrl', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', type: 'uint256' }],
    payable: true,
    stateMutability: 'payable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'proposalId', type: 'uint256' },
      { name: 'lesser', type: 'uint256' },
      { name: 'greater', type: 'uint256' },
    ],
    name: 'upvote',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'proposalId', type: 'uint256' }],
    name: 'getProposalStage',
    outputs: [{ name: '', type: 'uint8' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'lesser', type: 'uint256' },
      { name: 'greater', type: 'uint256' },
    ],
    name: 'revokeUpvote',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'proposalId', type: 'uint256' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'proposalId', type: 'uint256' },
      { name: 'index', type: 'uint256' },
      { name: 'value', type: 'uint8' },
    ],
    name: 'vote',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'proposalId', type: 'uint256' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'hash', type: 'bytes32' }],
    name: 'approveHotfix',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'hash', type: 'bytes32' },
      { name: 'whitelister', type: 'address' },
    ],
    name: 'isHotfixWhitelistedBy',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'hash', type: 'bytes32' }],
    name: 'whitelistHotfix',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'hash', type: 'bytes32' }],
    name: 'prepareHotfix',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'values', type: 'uint256[]' },
      { name: 'destinations', type: 'address[]' },
      { name: 'data', type: 'bytes' },
      { name: 'dataLengths', type: 'uint256[]' },
      { name: 'salt', type: 'bytes32' },
    ],
    name: 'executeHotfix',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'withdraw',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'isVoting',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getApprovalStageDuration',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getReferendumStageDuration',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getExecutionStageDuration',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getParticipationParameters',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'proposalId', type: 'uint256' }],
    name: 'proposalExists',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'proposalId', type: 'uint256' }],
    name: 'getProposal',
    outputs: [
      { name: '', type: 'address' },
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
      { name: '', type: 'string' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'proposalId', type: 'uint256' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'getProposalTransaction',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'address' },
      { name: '', type: 'bytes' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'proposalId', type: 'uint256' }],
    name: 'isApproved',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'proposalId', type: 'uint256' }],
    name: 'getVoteTotals',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'account', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'getVoteRecord',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getQueueLength',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'proposalId', type: 'uint256' }],
    name: 'getUpvotes',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getQueue',
    outputs: [
      { name: '', type: 'uint256[]' },
      { name: '', type: 'uint256[]' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getDequeue',
    outputs: [{ name: '', type: 'uint256[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getUpvoteRecord',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getMostRecentReferendumProposal',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'hash', type: 'bytes32' }],
    name: 'hotfixWhitelistValidatorTally',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'hash', type: 'bytes32' }],
    name: 'isHotfixPassing',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'hash', type: 'bytes32' }],
    name: 'getHotfixRecord',
    outputs: [
      { name: '', type: 'bool' },
      { name: '', type: 'bool' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'dequeueProposalsIfReady',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'proposalId', type: 'uint256' }],
    name: 'isQueued',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'proposalId', type: 'uint256' }],
    name: 'isProposalPassing',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'proposalId', type: 'uint256' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'isDequeuedProposal',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'proposalId', type: 'uint256' }],
    name: 'isDequeuedProposalExpired',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'proposalId', type: 'uint256' }],
    name: 'isQueuedProposalExpired',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'destination', type: 'address' },
      { name: 'functionId', type: 'bytes4' },
    ],
    name: 'getConstitution',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
]

export function newGovernance(web3: Web3, address: string): Governance {
  return new web3.eth.Contract(ABI, address) as any
}
