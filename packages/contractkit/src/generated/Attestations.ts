/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface Attestations extends Contract {
  clone(): Attestations
  methods: {
    validatorSignerAddressFromCurrentSet(index: number | string): TransactionObject<string>

    initialized(): TransactionObject<boolean>

    checkProofOfPossession(
      sender: string,
      blsKey: string | number[],
      blsPop: string | number[]
    ): TransactionObject<boolean>

    getEpochNumberOfBlock(blockNumber: number | string): TransactionObject<string>

    getVerifiedSealBitmapFromHeader(header: string | number[]): TransactionObject<string>

    validatorSignerAddressFromSet(
      index: number | string,
      blockNumber: number | string
    ): TransactionObject<string>

    hashHeader(header: string | number[]): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    minQuorumSizeInCurrentSet(): TransactionObject<string>

    registry(): TransactionObject<string>

    maxAttestations(): TransactionObject<string>

    numberValidatorsInCurrentSet(): TransactionObject<string>

    selectIssuersWaitBlocks(): TransactionObject<string>

    getBlockNumberFromHeader(header: string | number[]): TransactionObject<string>

    owner(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    getEpochNumber(): TransactionObject<string>

    numberValidatorsInSet(blockNumber: number | string): TransactionObject<string>

    setRegistry(registryAddress: string): TransactionObject<void>

    attestationExpiryBlocks(): TransactionObject<string>

    attestationRequestFees(arg0: string): TransactionObject<string>

    getEpochSize(): TransactionObject<string>

    minQuorumSize(blockNumber: number | string): TransactionObject<string>

    pendingWithdrawals(arg0: string, arg1: string): TransactionObject<string>

    fractionMulExp(
      aNumerator: number | string,
      aDenominator: number | string,
      bNumerator: number | string,
      bDenominator: number | string,
      exponent: number | string,
      _decimals: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    transferOwnership(newOwner: string): TransactionObject<void>

    getParentSealBitmap(blockNumber: number | string): TransactionObject<string>

    initialize(
      registryAddress: string,
      _attestationExpiryBlocks: number | string,
      _selectIssuersWaitBlocks: number | string,
      _maxAttestations: number | string,
      attestationRequestFeeTokens: string[],
      attestationRequestFeeValues: (number | string)[]
    ): TransactionObject<void>

    request(
      identifier: string | number[],
      attestationsRequested: number | string,
      attestationRequestFeeToken: string
    ): TransactionObject<void>

    selectIssuers(identifier: string | number[]): TransactionObject<void>

    complete(
      identifier: string | number[],
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    revoke(identifier: string | number[], index: number | string): TransactionObject<void>

    withdraw(token: string): TransactionObject<void>

    getUnselectedRequest(
      identifier: string | number[],
      account: string
    ): TransactionObject<{
      0: string
      1: string
      2: string
    }>

    getAttestationIssuers(
      identifier: string | number[],
      account: string
    ): TransactionObject<string[]>

    getAttestationStats(
      identifier: string | number[],
      account: string
    ): TransactionObject<{
      0: string
      1: string
    }>

    batchGetAttestationStats(
      identifiersToLookup: (string | number[])[]
    ): TransactionObject<{
      0: string[]
      1: string[]
      2: string[]
      3: string[]
    }>

    getAttestationState(
      identifier: string | number[],
      account: string,
      issuer: string
    ): TransactionObject<{
      0: string
      1: string
      2: string
    }>

    getCompletableAttestations(
      identifier: string | number[],
      account: string
    ): TransactionObject<{
      0: string[]
      1: string[]
      2: string[]
      3: string
    }>

    getAttestationRequestFee(token: string): TransactionObject<string>

    setAttestationRequestFee(token: string, fee: number | string): TransactionObject<void>

    setAttestationExpiryBlocks(_attestationExpiryBlocks: number | string): TransactionObject<void>

    setSelectIssuersWaitBlocks(_selectIssuersWaitBlocks: number | string): TransactionObject<void>

    setMaxAttestations(_maxAttestations: number | string): TransactionObject<void>

    getMaxAttestations(): TransactionObject<string>

    validateAttestationCode(
      identifier: string | number[],
      account: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<string>

    lookupAccountsForIdentifier(identifier: string | number[]): TransactionObject<string[]>
  }
  events: {
    AttestationsRequested: ContractEvent<{
      identifier: string
      account: string
      attestationsRequested: string
      attestationRequestFeeToken: string
      0: string
      1: string
      2: string
      3: string
    }>
    AttestationIssuerSelected: ContractEvent<{
      identifier: string
      account: string
      issuer: string
      attestationRequestFeeToken: string
      0: string
      1: string
      2: string
      3: string
    }>
    AttestationCompleted: ContractEvent<{
      identifier: string
      account: string
      issuer: string
      0: string
      1: string
      2: string
    }>
    Withdrawal: ContractEvent<{
      account: string
      token: string
      amount: string
      0: string
      1: string
      2: string
    }>
    AttestationExpiryBlocksSet: ContractEvent<string>
    AttestationRequestFeeSet: ContractEvent<{
      token: string
      value: string
      0: string
      1: string
    }>
    SelectIssuersWaitBlocksSet: ContractEvent<string>
    MaxAttestationsSet: ContractEvent<string>
    RegistrySet: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [{ name: 'index', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'blsKey', type: 'bytes' },
      { name: 'blsPop', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'index', type: 'uint256' },
      { name: 'blockNumber', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'maxAttestations',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'selectIssuersWaitBlocks',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'attestationExpiryBlocks',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'attestationRequestFees',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: '', type: 'address' },
      { name: '', type: 'address' },
    ],
    name: 'pendingWithdrawals',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'aNumerator', type: 'uint256' },
      { name: 'aDenominator', type: 'uint256' },
      { name: 'bNumerator', type: 'uint256' },
      { name: 'bDenominator', type: 'uint256' },
      { name: 'exponent', type: 'uint256' },
      { name: '_decimals', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'identifier', type: 'bytes32' },
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'attestationsRequested', type: 'uint256' },
      { indexed: false, name: 'attestationRequestFeeToken', type: 'address' },
    ],
    name: 'AttestationsRequested',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'identifier', type: 'bytes32' },
      { indexed: true, name: 'account', type: 'address' },
      { indexed: true, name: 'issuer', type: 'address' },
      { indexed: false, name: 'attestationRequestFeeToken', type: 'address' },
    ],
    name: 'AttestationIssuerSelected',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'identifier', type: 'bytes32' },
      { indexed: true, name: 'account', type: 'address' },
      { indexed: true, name: 'issuer', type: 'address' },
    ],
    name: 'AttestationCompleted',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: true, name: 'token', type: 'address' },
      { indexed: false, name: 'amount', type: 'uint256' },
    ],
    name: 'Withdrawal',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'value', type: 'uint256' }],
    name: 'AttestationExpiryBlocksSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'token', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'AttestationRequestFeeSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'value', type: 'uint256' }],
    name: 'SelectIssuersWaitBlocksSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'value', type: 'uint256' }],
    name: 'MaxAttestationsSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
    name: 'RegistrySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    constant: false,
    inputs: [
      { name: 'registryAddress', type: 'address' },
      { name: '_attestationExpiryBlocks', type: 'uint256' },
      { name: '_selectIssuersWaitBlocks', type: 'uint256' },
      { name: '_maxAttestations', type: 'uint256' },
      { name: 'attestationRequestFeeTokens', type: 'address[]' },
      { name: 'attestationRequestFeeValues', type: 'uint256[]' },
    ],
    name: 'initialize',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'identifier', type: 'bytes32' },
      { name: 'attestationsRequested', type: 'uint256' },
      { name: 'attestationRequestFeeToken', type: 'address' },
    ],
    name: 'request',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'identifier', type: 'bytes32' }],
    name: 'selectIssuers',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'identifier', type: 'bytes32' },
      { name: 'v', type: 'uint8' },
      { name: 'r', type: 'bytes32' },
      { name: 's', type: 'bytes32' },
    ],
    name: 'complete',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'identifier', type: 'bytes32' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'revoke',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'token', type: 'address' }],
    name: 'withdraw',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'identifier', type: 'bytes32' },
      { name: 'account', type: 'address' },
    ],
    name: 'getUnselectedRequest',
    outputs: [
      { name: '', type: 'uint32' },
      { name: '', type: 'uint32' },
      { name: '', type: 'address' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'identifier', type: 'bytes32' },
      { name: 'account', type: 'address' },
    ],
    name: 'getAttestationIssuers',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'identifier', type: 'bytes32' },
      { name: 'account', type: 'address' },
    ],
    name: 'getAttestationStats',
    outputs: [
      { name: '', type: 'uint32' },
      { name: '', type: 'uint32' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'identifiersToLookup', type: 'bytes32[]' }],
    name: 'batchGetAttestationStats',
    outputs: [
      { name: '', type: 'uint256[]' },
      { name: '', type: 'address[]' },
      { name: '', type: 'uint64[]' },
      { name: '', type: 'uint64[]' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'identifier', type: 'bytes32' },
      { name: 'account', type: 'address' },
      { name: 'issuer', type: 'address' },
    ],
    name: 'getAttestationState',
    outputs: [
      { name: '', type: 'uint8' },
      { name: '', type: 'uint32' },
      { name: '', type: 'address' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'identifier', type: 'bytes32' },
      { name: 'account', type: 'address' },
    ],
    name: 'getCompletableAttestations',
    outputs: [
      { name: '', type: 'uint32[]' },
      { name: '', type: 'address[]' },
      { name: '', type: 'uint256[]' },
      { name: '', type: 'bytes' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'token', type: 'address' }],
    name: 'getAttestationRequestFee',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'token', type: 'address' },
      { name: 'fee', type: 'uint256' },
    ],
    name: 'setAttestationRequestFee',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_attestationExpiryBlocks', type: 'uint256' }],
    name: 'setAttestationExpiryBlocks',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_selectIssuersWaitBlocks', type: 'uint256' }],
    name: 'setSelectIssuersWaitBlocks',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_maxAttestations', type: 'uint256' }],
    name: 'setMaxAttestations',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getMaxAttestations',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'identifier', type: 'bytes32' },
      { name: 'account', type: 'address' },
      { name: 'v', type: 'uint8' },
      { name: 'r', type: 'bytes32' },
      { name: 's', type: 'bytes32' },
    ],
    name: 'validateAttestationCode',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'identifier', type: 'bytes32' }],
    name: 'lookupAccountsForIdentifier',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
]

export function newAttestations(web3: Web3, address: string): Attestations {
  return new web3.eth.Contract(ABI, address) as any
}
