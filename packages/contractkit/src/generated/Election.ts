/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface Election extends Contract {
  clone(): Election
  methods: {
    validatorSignerAddressFromCurrentSet(index: number | string): TransactionObject<string>

    initialized(): TransactionObject<boolean>

    checkProofOfPossession(
      sender: string,
      blsKey: string | number[],
      blsPop: string | number[]
    ): TransactionObject<boolean>

    getEpochNumberOfBlock(blockNumber: number | string): TransactionObject<string>

    getVerifiedSealBitmapFromHeader(header: string | number[]): TransactionObject<string>

    electabilityThreshold(): TransactionObject<string>

    validatorSignerAddressFromSet(
      index: number | string,
      blockNumber: number | string
    ): TransactionObject<string>

    hashHeader(header: string | number[]): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    minQuorumSizeInCurrentSet(): TransactionObject<string>

    registry(): TransactionObject<string>

    numberValidatorsInCurrentSet(): TransactionObject<string>

    getBlockNumberFromHeader(header: string | number[]): TransactionObject<string>

    owner(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    getEpochNumber(): TransactionObject<string>

    numberValidatorsInSet(blockNumber: number | string): TransactionObject<string>

    setRegistry(registryAddress: string): TransactionObject<void>

    maxNumGroupsVotedFor(): TransactionObject<string>

    getEpochSize(): TransactionObject<string>

    minQuorumSize(blockNumber: number | string): TransactionObject<string>

    fractionMulExp(
      aNumerator: number | string,
      aDenominator: number | string,
      bNumerator: number | string,
      bDenominator: number | string,
      exponent: number | string,
      _decimals: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    transferOwnership(newOwner: string): TransactionObject<void>

    electableValidators(): TransactionObject<{
      min: string
      max: string
      0: string
      1: string
    }>

    getParentSealBitmap(blockNumber: number | string): TransactionObject<string>

    initialize(
      registryAddress: string,
      minElectableValidators: number | string,
      maxElectableValidators: number | string,
      _maxNumGroupsVotedFor: number | string,
      _electabilityThreshold: number | string
    ): TransactionObject<void>

    setElectableValidators(min: number | string, max: number | string): TransactionObject<boolean>

    getElectableValidators(): TransactionObject<{
      0: string
      1: string
    }>

    setMaxNumGroupsVotedFor(_maxNumGroupsVotedFor: number | string): TransactionObject<boolean>

    setElectabilityThreshold(threshold: number | string): TransactionObject<boolean>

    getElectabilityThreshold(): TransactionObject<string>

    vote(
      group: string,
      value: number | string,
      lesser: string,
      greater: string
    ): TransactionObject<boolean>

    activate(group: string): TransactionObject<boolean>

    hasActivatablePendingVotes(account: string, group: string): TransactionObject<boolean>

    revokePending(
      group: string,
      value: number | string,
      lesser: string,
      greater: string,
      index: number | string
    ): TransactionObject<boolean>

    revokeAllActive(
      group: string,
      lesser: string,
      greater: string,
      index: number | string
    ): TransactionObject<boolean>

    revokeActive(
      group: string,
      value: number | string,
      lesser: string,
      greater: string,
      index: number | string
    ): TransactionObject<boolean>

    getTotalVotesByAccount(account: string): TransactionObject<string>

    getPendingVotesForGroupByAccount(group: string, account: string): TransactionObject<string>

    getActiveVotesForGroupByAccount(group: string, account: string): TransactionObject<string>

    getTotalVotesForGroupByAccount(group: string, account: string): TransactionObject<string>

    getActiveVoteUnitsForGroupByAccount(group: string, account: string): TransactionObject<string>

    getActiveVoteUnitsForGroup(group: string): TransactionObject<string>

    getTotalVotesForGroup(group: string): TransactionObject<string>

    getActiveVotesForGroup(group: string): TransactionObject<string>

    getPendingVotesForGroup(group: string): TransactionObject<string>

    getGroupEligibility(group: string): TransactionObject<boolean>

    getGroupEpochRewards(
      group: string,
      totalEpochRewards: number | string,
      uptimes: (number | string)[]
    ): TransactionObject<string>

    distributeEpochRewards(
      group: string,
      value: number | string,
      lesser: string,
      greater: string
    ): TransactionObject<void>

    markGroupIneligible(group: string): TransactionObject<void>

    markGroupEligible(group: string, lesser: string, greater: string): TransactionObject<void>

    getGroupsVotedForByAccount(account: string): TransactionObject<string[]>

    canReceiveVotes(group: string, value: number | string): TransactionObject<boolean>

    getNumVotesReceivable(group: string): TransactionObject<string>

    getTotalVotes(): TransactionObject<string>

    getActiveVotes(): TransactionObject<string>

    getEligibleValidatorGroups(): TransactionObject<string[]>

    getTotalVotesForEligibleValidatorGroups(): TransactionObject<{
      groups: string[]
      values: string[]
      0: string[]
      1: string[]
    }>

    electValidatorSigners(): TransactionObject<string[]>

    electNValidatorSigners(
      minElectableValidators: number | string,
      maxElectableValidators: number | string
    ): TransactionObject<string[]>

    getCurrentValidatorSigners(): TransactionObject<string[]>

    forceDecrementVotes(
      account: string,
      value: number | string,
      lessers: string[],
      greaters: string[],
      indices: (number | string)[]
    ): TransactionObject<string>
  }
  events: {
    ElectableValidatorsSet: ContractEvent<{
      min: string
      max: string
      0: string
      1: string
    }>
    MaxNumGroupsVotedForSet: ContractEvent<string>
    ElectabilityThresholdSet: ContractEvent<string>
    ValidatorGroupMarkedEligible: ContractEvent<string>
    ValidatorGroupMarkedIneligible: ContractEvent<string>
    ValidatorGroupVoteCast: ContractEvent<{
      account: string
      group: string
      value: string
      0: string
      1: string
      2: string
    }>
    ValidatorGroupVoteActivated: ContractEvent<{
      account: string
      group: string
      value: string
      units: string
      0: string
      1: string
      2: string
      3: string
    }>
    ValidatorGroupPendingVoteRevoked: ContractEvent<{
      account: string
      group: string
      value: string
      0: string
      1: string
      2: string
    }>
    ValidatorGroupActiveVoteRevoked: ContractEvent<{
      account: string
      group: string
      value: string
      units: string
      0: string
      1: string
      2: string
      3: string
    }>
    EpochRewardsDistributedToVoters: ContractEvent<{
      group: string
      value: string
      0: string
      1: string
    }>
    RegistrySet: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [{ name: 'index', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'blsKey', type: 'bytes' },
      { name: 'blsPop', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'electabilityThreshold',
    outputs: [{ name: 'value', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'index', type: 'uint256' },
      { name: 'blockNumber', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'maxNumGroupsVotedFor',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'aNumerator', type: 'uint256' },
      { name: 'aDenominator', type: 'uint256' },
      { name: 'bNumerator', type: 'uint256' },
      { name: 'bDenominator', type: 'uint256' },
      { name: 'exponent', type: 'uint256' },
      { name: '_decimals', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'electableValidators',
    outputs: [
      { name: 'min', type: 'uint256' },
      { name: 'max', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: 'min', type: 'uint256' },
      { indexed: false, name: 'max', type: 'uint256' },
    ],
    name: 'ElectableValidatorsSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'maxNumGroupsVotedFor', type: 'uint256' }],
    name: 'MaxNumGroupsVotedForSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'electabilityThreshold', type: 'uint256' }],
    name: 'ElectabilityThresholdSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'group', type: 'address' }],
    name: 'ValidatorGroupMarkedEligible',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'group', type: 'address' }],
    name: 'ValidatorGroupMarkedIneligible',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: true, name: 'group', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'ValidatorGroupVoteCast',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: true, name: 'group', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
      { indexed: false, name: 'units', type: 'uint256' },
    ],
    name: 'ValidatorGroupVoteActivated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: true, name: 'group', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'ValidatorGroupPendingVoteRevoked',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: true, name: 'group', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
      { indexed: false, name: 'units', type: 'uint256' },
    ],
    name: 'ValidatorGroupActiveVoteRevoked',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'group', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'EpochRewardsDistributedToVoters',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
    name: 'RegistrySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    constant: false,
    inputs: [
      { name: 'registryAddress', type: 'address' },
      { name: 'minElectableValidators', type: 'uint256' },
      { name: 'maxElectableValidators', type: 'uint256' },
      { name: '_maxNumGroupsVotedFor', type: 'uint256' },
      { name: '_electabilityThreshold', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'min', type: 'uint256' },
      { name: 'max', type: 'uint256' },
    ],
    name: 'setElectableValidators',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getElectableValidators',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_maxNumGroupsVotedFor', type: 'uint256' }],
    name: 'setMaxNumGroupsVotedFor',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'threshold', type: 'uint256' }],
    name: 'setElectabilityThreshold',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getElectabilityThreshold',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'lesser', type: 'address' },
      { name: 'greater', type: 'address' },
    ],
    name: 'vote',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'group', type: 'address' }],
    name: 'activate',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'account', type: 'address' },
      { name: 'group', type: 'address' },
    ],
    name: 'hasActivatablePendingVotes',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'lesser', type: 'address' },
      { name: 'greater', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'revokePending',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'lesser', type: 'address' },
      { name: 'greater', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'revokeAllActive',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'lesser', type: 'address' },
      { name: 'greater', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'revokeActive',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getTotalVotesByAccount',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'account', type: 'address' },
    ],
    name: 'getPendingVotesForGroupByAccount',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'account', type: 'address' },
    ],
    name: 'getActiveVotesForGroupByAccount',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'account', type: 'address' },
    ],
    name: 'getTotalVotesForGroupByAccount',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'account', type: 'address' },
    ],
    name: 'getActiveVoteUnitsForGroupByAccount',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'group', type: 'address' }],
    name: 'getActiveVoteUnitsForGroup',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'group', type: 'address' }],
    name: 'getTotalVotesForGroup',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'group', type: 'address' }],
    name: 'getActiveVotesForGroup',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'group', type: 'address' }],
    name: 'getPendingVotesForGroup',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'group', type: 'address' }],
    name: 'getGroupEligibility',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'totalEpochRewards', type: 'uint256' },
      { name: 'uptimes', type: 'uint256[]' },
    ],
    name: 'getGroupEpochRewards',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'lesser', type: 'address' },
      { name: 'greater', type: 'address' },
    ],
    name: 'distributeEpochRewards',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'group', type: 'address' }],
    name: 'markGroupIneligible',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'lesser', type: 'address' },
      { name: 'greater', type: 'address' },
    ],
    name: 'markGroupEligible',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getGroupsVotedForByAccount',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'group', type: 'address' },
      { name: 'value', type: 'uint256' },
    ],
    name: 'canReceiveVotes',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'group', type: 'address' }],
    name: 'getNumVotesReceivable',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getTotalVotes',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getActiveVotes',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getEligibleValidatorGroups',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getTotalVotesForEligibleValidatorGroups',
    outputs: [
      { name: 'groups', type: 'address[]' },
      { name: 'values', type: 'uint256[]' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'electValidatorSigners',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'minElectableValidators', type: 'uint256' },
      { name: 'maxElectableValidators', type: 'uint256' },
    ],
    name: 'electNValidatorSigners',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getCurrentValidatorSigners',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'account', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'lessers', type: 'address[]' },
      { name: 'greaters', type: 'address[]' },
      { name: 'indices', type: 'uint256[]' },
    ],
    name: 'forceDecrementVotes',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

export function newElection(web3: Web3, address: string): Election {
  return new web3.eth.Contract(ABI, address) as any
}
