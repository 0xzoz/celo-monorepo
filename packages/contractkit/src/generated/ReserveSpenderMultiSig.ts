/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface ReserveSpenderMultiSig extends Contract {
  clone(): ReserveSpenderMultiSig
  methods: {
    owners(arg0: number | string): TransactionObject<string>

    initialized(): TransactionObject<boolean>

    removeOwner(owner: string): TransactionObject<void>

    revokeConfirmation(transactionId: number | string): TransactionObject<void>

    changeInternalRequirement(_internalRequired: number | string): TransactionObject<void>

    isOwner(arg0: string): TransactionObject<boolean>

    confirmations(arg0: number | string, arg1: string): TransactionObject<boolean>

    getTransactionCount(pending: boolean, executed: boolean): TransactionObject<string>

    initialize(
      _owners: string[],
      _required: number | string,
      _internalRequired: number | string
    ): TransactionObject<void>

    addOwner(owner: string): TransactionObject<void>

    isConfirmed(transactionId: number | string): TransactionObject<boolean>

    getConfirmationCount(transactionId: number | string): TransactionObject<string>

    transactions(
      arg0: number | string
    ): TransactionObject<{
      destination: string
      value: string
      data: string
      executed: boolean
      0: string
      1: string
      2: string
      3: boolean
    }>

    getOwners(): TransactionObject<string[]>

    internalRequired(): TransactionObject<string>

    getTransactionIds(
      from: number | string,
      to: number | string,
      pending: boolean,
      executed: boolean
    ): TransactionObject<string[]>

    getConfirmations(transactionId: number | string): TransactionObject<string[]>

    transactionCount(): TransactionObject<string>

    changeRequirement(_required: number | string): TransactionObject<void>

    confirmTransaction(transactionId: number | string): TransactionObject<void>

    submitTransaction(
      destination: string,
      value: number | string,
      data: string | number[]
    ): TransactionObject<string>

    MAX_OWNER_COUNT(): TransactionObject<string>

    required(): TransactionObject<string>

    replaceOwner(owner: string, newOwner: string): TransactionObject<void>

    executeTransaction(transactionId: number | string): TransactionObject<void>
  }
  events: {
    Confirmation: ContractEvent<{
      sender: string
      transactionId: string
      0: string
      1: string
    }>
    Revocation: ContractEvent<{
      sender: string
      transactionId: string
      0: string
      1: string
    }>
    Submission: ContractEvent<string>
    Execution: ContractEvent<{
      transactionId: string
      returnData: string
      0: string
      1: string
    }>
    Deposit: ContractEvent<{
      sender: string
      value: string
      0: string
      1: string
    }>
    OwnerAddition: ContractEvent<string>
    OwnerRemoval: ContractEvent<string>
    RequirementChange: ContractEvent<string>
    InternalRequirementChange: ContractEvent<string>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [{ name: '', type: 'uint256' }],
    name: 'owners',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'owner', type: 'address' }],
    name: 'removeOwner',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'transactionId', type: 'uint256' }],
    name: 'revokeConfirmation',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_internalRequired', type: 'uint256' }],
    name: 'changeInternalRequirement',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'address' },
    ],
    name: 'confirmations',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'pending', type: 'bool' },
      { name: 'executed', type: 'bool' },
    ],
    name: 'getTransactionCount',
    outputs: [{ name: 'count', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: '_owners', type: 'address[]' },
      { name: '_required', type: 'uint256' },
      { name: '_internalRequired', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'owner', type: 'address' }],
    name: 'addOwner',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'transactionId', type: 'uint256' }],
    name: 'isConfirmed',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'transactionId', type: 'uint256' }],
    name: 'getConfirmationCount',
    outputs: [{ name: 'count', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'uint256' }],
    name: 'transactions',
    outputs: [
      { name: 'destination', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'data', type: 'bytes' },
      { name: 'executed', type: 'bool' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'internalRequired',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'from', type: 'uint256' },
      { name: 'to', type: 'uint256' },
      { name: 'pending', type: 'bool' },
      { name: 'executed', type: 'bool' },
    ],
    name: 'getTransactionIds',
    outputs: [{ name: '_transactionIds', type: 'uint256[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'transactionId', type: 'uint256' }],
    name: 'getConfirmations',
    outputs: [{ name: '_confirmations', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'transactionCount',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: '_required', type: 'uint256' }],
    name: 'changeRequirement',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'transactionId', type: 'uint256' }],
    name: 'confirmTransaction',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'destination', type: 'address' },
      { name: 'value', type: 'uint256' },
      { name: 'data', type: 'bytes' },
    ],
    name: 'submitTransaction',
    outputs: [{ name: 'transactionId', type: 'uint256' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'MAX_OWNER_COUNT',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'required',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'newOwner', type: 'address' },
    ],
    name: 'replaceOwner',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'transactionId', type: 'uint256' }],
    name: 'executeTransaction',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'sender', type: 'address' },
      { indexed: true, name: 'transactionId', type: 'uint256' },
    ],
    name: 'Confirmation',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'sender', type: 'address' },
      { indexed: true, name: 'transactionId', type: 'uint256' },
    ],
    name: 'Revocation',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'transactionId', type: 'uint256' }],
    name: 'Submission',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'transactionId', type: 'uint256' },
      { indexed: false, name: 'returnData', type: 'bytes' },
    ],
    name: 'Execution',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'sender', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'Deposit',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'owner', type: 'address' }],
    name: 'OwnerAddition',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'owner', type: 'address' }],
    name: 'OwnerRemoval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'required', type: 'uint256' }],
    name: 'RequirementChange',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'internalRequired', type: 'uint256' }],
    name: 'InternalRequirementChange',
    type: 'event',
  },
]

export function newReserveSpenderMultiSig(web3: Web3, address: string): ReserveSpenderMultiSig {
  return new web3.eth.Contract(ABI, address) as any
}
