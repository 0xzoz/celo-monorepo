/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface Accounts extends Contract {
  clone(): Accounts
  methods: {
    initialized(): TransactionObject<boolean>

    renounceOwnership(): TransactionObject<void>

    registry(): TransactionObject<string>

    owner(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    setRegistry(registryAddress: string): TransactionObject<void>

    authorizedBy(arg0: string): TransactionObject<string>

    transferOwnership(newOwner: string): TransactionObject<void>

    initialize(registryAddress: string): TransactionObject<void>

    setAccount(
      name: string,
      dataEncryptionKey: string | number[],
      walletAddress: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    createAccount(): TransactionObject<boolean>

    setName(name: string): TransactionObject<void>

    setWalletAddress(
      walletAddress: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    setAccountDataEncryptionKey(dataEncryptionKey: string | number[]): TransactionObject<void>

    setMetadataURL(metadataURL: string): TransactionObject<void>

    authorizeVoteSigner(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    authorizeValidatorSigner(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    authorizeValidatorSignerWithPublicKey(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[],
      ecdsaPublicKey: string | number[]
    ): TransactionObject<void>

    authorizeValidatorSignerWithKeys(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[],
      ecdsaPublicKey: string | number[],
      blsPublicKey: string | number[],
      blsPop: string | number[]
    ): TransactionObject<void>

    authorizeAttestationSigner(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    removeVoteSigner(): TransactionObject<void>

    removeValidatorSigner(): TransactionObject<void>

    removeAttestationSigner(): TransactionObject<void>

    attestationSignerToAccount(signer: string): TransactionObject<string>

    validatorSignerToAccount(signer: string): TransactionObject<string>

    voteSignerToAccount(signer: string): TransactionObject<string>

    signerToAccount(signer: string): TransactionObject<string>

    getVoteSigner(account: string): TransactionObject<string>

    getValidatorSigner(account: string): TransactionObject<string>

    getAttestationSigner(account: string): TransactionObject<string>

    hasAuthorizedVoteSigner(account: string): TransactionObject<boolean>

    hasAuthorizedValidatorSigner(account: string): TransactionObject<boolean>

    hasAuthorizedAttestationSigner(account: string): TransactionObject<boolean>

    getName(account: string): TransactionObject<string>

    getMetadataURL(account: string): TransactionObject<string>

    batchGetMetadataURL(
      accountsToQuery: string[]
    ): TransactionObject<{
      0: string[]
      1: string
    }>

    getDataEncryptionKey(account: string): TransactionObject<string>

    getWalletAddress(account: string): TransactionObject<string>

    isAccount(account: string): TransactionObject<boolean>

    isAuthorizedSigner(signer: string): TransactionObject<boolean>
  }
  events: {
    AttestationSignerAuthorized: ContractEvent<{
      account: string
      signer: string
      0: string
      1: string
    }>
    VoteSignerAuthorized: ContractEvent<{
      account: string
      signer: string
      0: string
      1: string
    }>
    ValidatorSignerAuthorized: ContractEvent<{
      account: string
      signer: string
      0: string
      1: string
    }>
    AttestationSignerRemoved: ContractEvent<{
      account: string
      oldSigner: string
      0: string
      1: string
    }>
    VoteSignerRemoved: ContractEvent<{
      account: string
      oldSigner: string
      0: string
      1: string
    }>
    ValidatorSignerRemoved: ContractEvent<{
      account: string
      oldSigner: string
      0: string
      1: string
    }>
    AccountDataEncryptionKeySet: ContractEvent<{
      account: string
      dataEncryptionKey: string
      0: string
      1: string
    }>
    AccountNameSet: ContractEvent<{
      account: string
      name: string
      0: string
      1: string
    }>
    AccountMetadataURLSet: ContractEvent<{
      account: string
      metadataURL: string
      0: string
      1: string
    }>
    AccountWalletAddressSet: ContractEvent<{
      account: string
      walletAddress: string
      0: string
      1: string
    }>
    AccountCreated: ContractEvent<string>
    RegistrySet: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'authorizedBy',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'signer', type: 'address' },
    ],
    name: 'AttestationSignerAuthorized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'signer', type: 'address' },
    ],
    name: 'VoteSignerAuthorized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'signer', type: 'address' },
    ],
    name: 'ValidatorSignerAuthorized',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'oldSigner', type: 'address' },
    ],
    name: 'AttestationSignerRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'oldSigner', type: 'address' },
    ],
    name: 'VoteSignerRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'oldSigner', type: 'address' },
    ],
    name: 'ValidatorSignerRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'dataEncryptionKey', type: 'bytes' },
    ],
    name: 'AccountDataEncryptionKeySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'name', type: 'string' },
    ],
    name: 'AccountNameSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'metadataURL', type: 'string' },
    ],
    name: 'AccountMetadataURLSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'account', type: 'address' },
      { indexed: false, name: 'walletAddress', type: 'address' },
    ],
    name: 'AccountWalletAddressSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'account', type: 'address' }],
    name: 'AccountCreated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
    name: 'RegistrySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'initialize',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'name', type: 'string' },
      { name: 'dataEncryptionKey', type: 'bytes' },
      { name: 'walletAddress', type: 'address' },
      { name: 'v', type: 'uint8' },
      { name: 'r', type: 'bytes32' },
      { name: 's', type: 'bytes32' },
    ],
    name: 'setAccount',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'name', type: 'string' }],
    name: 'setName',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'walletAddress', type: 'address' },
      { name: 'v', type: 'uint8' },
      { name: 'r', type: 'bytes32' },
      { name: 's', type: 'bytes32' },
    ],
    name: 'setWalletAddress',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'dataEncryptionKey', type: 'bytes' }],
    name: 'setAccountDataEncryptionKey',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'metadataURL', type: 'string' }],
    name: 'setMetadataURL',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'signer', type: 'address' },
      { name: 'v', type: 'uint8' },
      { name: 'r', type: 'bytes32' },
      { name: 's', type: 'bytes32' },
    ],
    name: 'authorizeVoteSigner',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'signer', type: 'address' },
      { name: 'v', type: 'uint8' },
      { name: 'r', type: 'bytes32' },
      { name: 's', type: 'bytes32' },
    ],
    name: 'authorizeValidatorSigner',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'signer', type: 'address' },
      { name: 'v', type: 'uint8' },
      { name: 'r', type: 'bytes32' },
      { name: 's', type: 'bytes32' },
      { name: 'ecdsaPublicKey', type: 'bytes' },
    ],
    name: 'authorizeValidatorSignerWithPublicKey',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'signer', type: 'address' },
      { name: 'v', type: 'uint8' },
      { name: 'r', type: 'bytes32' },
      { name: 's', type: 'bytes32' },
      { name: 'ecdsaPublicKey', type: 'bytes' },
      { name: 'blsPublicKey', type: 'bytes' },
      { name: 'blsPop', type: 'bytes' },
    ],
    name: 'authorizeValidatorSignerWithKeys',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'signer', type: 'address' },
      { name: 'v', type: 'uint8' },
      { name: 'r', type: 'bytes32' },
      { name: 's', type: 'bytes32' },
    ],
    name: 'authorizeAttestationSigner',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'removeVoteSigner',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'removeValidatorSigner',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'removeAttestationSigner',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'signer', type: 'address' }],
    name: 'attestationSignerToAccount',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'signer', type: 'address' }],
    name: 'validatorSignerToAccount',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'signer', type: 'address' }],
    name: 'voteSignerToAccount',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'signer', type: 'address' }],
    name: 'signerToAccount',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getVoteSigner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getValidatorSigner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getAttestationSigner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'hasAuthorizedVoteSigner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'hasAuthorizedValidatorSigner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'hasAuthorizedAttestationSigner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getName',
    outputs: [{ name: '', type: 'string' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getMetadataURL',
    outputs: [{ name: '', type: 'string' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'accountsToQuery', type: 'address[]' }],
    name: 'batchGetMetadataURL',
    outputs: [
      { name: '', type: 'uint256[]' },
      { name: '', type: 'bytes' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getDataEncryptionKey',
    outputs: [{ name: '', type: 'bytes' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'getWalletAddress',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'account', type: 'address' }],
    name: 'isAccount',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'signer', type: 'address' }],
    name: 'isAuthorizedSigner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
]

export function newAccounts(web3: Web3, address: string): Accounts {
  return new web3.eth.Contract(ABI, address) as any
}
