/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface Exchange extends Contract {
  clone(): Exchange
  methods: {
    initialized(): TransactionObject<boolean>

    minimumReports(): TransactionObject<string>

    stable(): TransactionObject<string>

    stableBucket(): TransactionObject<string>

    spread(): TransactionObject<string>

    goldBucket(): TransactionObject<string>

    updateFrequency(): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    registry(): TransactionObject<string>

    owner(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    setRegistry(registryAddress: string): TransactionObject<void>

    reserveFraction(): TransactionObject<string>

    lastBucketUpdate(): TransactionObject<string>

    transferOwnership(newOwner: string): TransactionObject<void>

    initialize(
      registryAddress: string,
      stableToken: string,
      _spread: number | string,
      _reserveFraction: number | string,
      _updateFrequency: number | string,
      _minimumReports: number | string
    ): TransactionObject<void>

    exchange(
      sellAmount: number | string,
      minBuyAmount: number | string,
      sellGold: boolean
    ): TransactionObject<string>

    getBuyTokenAmount(sellAmount: number | string, sellGold: boolean): TransactionObject<string>

    getSellTokenAmount(buyAmount: number | string, sellGold: boolean): TransactionObject<string>

    getBuyAndSellBuckets(
      sellGold: boolean
    ): TransactionObject<{
      0: string
      1: string
    }>

    setUpdateFrequency(newUpdateFrequency: number | string): TransactionObject<void>

    setMinimumReports(newMininumReports: number | string): TransactionObject<void>

    setStableToken(newStableToken: string): TransactionObject<void>

    setSpread(newSpread: number | string): TransactionObject<void>

    setReserveFraction(newReserveFraction: number | string): TransactionObject<void>
  }
  events: {
    Exchanged: ContractEvent<{
      exchanger: string
      sellAmount: string
      buyAmount: string
      soldGold: boolean
      0: string
      1: string
      2: string
      3: boolean
    }>
    UpdateFrequencySet: ContractEvent<string>
    MinimumReportsSet: ContractEvent<string>
    StableTokenSet: ContractEvent<string>
    SpreadSet: ContractEvent<string>
    ReserveFractionSet: ContractEvent<string>
    BucketsUpdated: ContractEvent<{
      goldBucket: string
      stableBucket: string
      0: string
      1: string
    }>
    RegistrySet: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'minimumReports',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'stable',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'stableBucket',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'spread',
    outputs: [{ name: 'value', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'goldBucket',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'updateFrequency',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'reserveFraction',
    outputs: [{ name: 'value', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'lastBucketUpdate',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'exchanger', type: 'address' },
      { indexed: false, name: 'sellAmount', type: 'uint256' },
      { indexed: false, name: 'buyAmount', type: 'uint256' },
      { indexed: false, name: 'soldGold', type: 'bool' },
    ],
    name: 'Exchanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'updateFrequency', type: 'uint256' }],
    name: 'UpdateFrequencySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'minimumReports', type: 'uint256' }],
    name: 'MinimumReportsSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'stable', type: 'address' }],
    name: 'StableTokenSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'spread', type: 'uint256' }],
    name: 'SpreadSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'reserveFraction', type: 'uint256' }],
    name: 'ReserveFractionSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: 'goldBucket', type: 'uint256' },
      { indexed: false, name: 'stableBucket', type: 'uint256' },
    ],
    name: 'BucketsUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
    name: 'RegistrySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    constant: false,
    inputs: [
      { name: 'registryAddress', type: 'address' },
      { name: 'stableToken', type: 'address' },
      { name: '_spread', type: 'uint256' },
      { name: '_reserveFraction', type: 'uint256' },
      { name: '_updateFrequency', type: 'uint256' },
      { name: '_minimumReports', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'sellAmount', type: 'uint256' },
      { name: 'minBuyAmount', type: 'uint256' },
      { name: 'sellGold', type: 'bool' },
    ],
    name: 'exchange',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'sellAmount', type: 'uint256' },
      { name: 'sellGold', type: 'bool' },
    ],
    name: 'getBuyTokenAmount',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'buyAmount', type: 'uint256' },
      { name: 'sellGold', type: 'bool' },
    ],
    name: 'getSellTokenAmount',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'sellGold', type: 'bool' }],
    name: 'getBuyAndSellBuckets',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newUpdateFrequency', type: 'uint256' }],
    name: 'setUpdateFrequency',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newMininumReports', type: 'uint256' }],
    name: 'setMinimumReports',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newStableToken', type: 'address' }],
    name: 'setStableToken',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newSpread', type: 'uint256' }],
    name: 'setSpread',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newReserveFraction', type: 'uint256' }],
    name: 'setReserveFraction',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

export function newExchange(web3: Web3, address: string): Exchange {
  return new web3.eth.Contract(ABI, address) as any
}
