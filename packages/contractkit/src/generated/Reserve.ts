/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface Reserve extends Contract {
  clone(): Reserve
  methods: {
    frozenReserveGoldStartBalance(): TransactionObject<string>

    assetAllocationSymbols(arg0: number | string): TransactionObject<string>

    initialized(): TransactionObject<boolean>

    isToken(arg0: string): TransactionObject<boolean>

    tobinTaxCache(): TransactionObject<{
      numerator: string
      timestamp: string
      0: string
      1: string
    }>

    spendingLimit(): TransactionObject<string>

    otherReserveAddresses(arg0: number | string): TransactionObject<string>

    frozenReserveGoldDays(): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    tobinTaxReserveRatio(): TransactionObject<string>

    registry(): TransactionObject<string>

    isOtherReserveAddress(arg0: string): TransactionObject<boolean>

    frozenReserveGoldStartDay(): TransactionObject<string>

    tobinTax(): TransactionObject<string>

    owner(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    isSpender(arg0: string): TransactionObject<boolean>

    setRegistry(registryAddress: string): TransactionObject<void>

    tobinTaxStalenessThreshold(): TransactionObject<string>

    assetAllocationWeights(arg0: string | number[]): TransactionObject<string>

    transferOwnership(newOwner: string): TransactionObject<void>

    lastSpendingDay(): TransactionObject<string>

    initialize(
      registryAddress: string,
      _tobinTaxStalenessThreshold: number | string,
      _spendingRatio: number | string,
      _frozenGold: number | string,
      _frozenDays: number | string,
      _assetAllocationSymbols: (string | number[])[],
      _assetAllocationWeights: (number | string)[],
      _tobinTax: number | string,
      _tobinTaxReserveRatio: number | string
    ): TransactionObject<void>

    setTobinTaxStalenessThreshold(value: number | string): TransactionObject<void>

    setTobinTax(value: number | string): TransactionObject<void>

    setTobinTaxReserveRatio(value: number | string): TransactionObject<void>

    setDailySpendingRatio(ratio: number | string): TransactionObject<void>

    getDailySpendingRatio(): TransactionObject<string>

    setFrozenGold(frozenGold: number | string, frozenDays: number | string): TransactionObject<void>

    setAssetAllocations(
      symbols: (string | number[])[],
      weights: (number | string)[]
    ): TransactionObject<void>

    addToken(token: string): TransactionObject<boolean>

    removeToken(token: string, index: number | string): TransactionObject<boolean>

    addOtherReserveAddress(reserveAddress: string): TransactionObject<boolean>

    removeOtherReserveAddress(
      reserveAddress: string,
      index: number | string
    ): TransactionObject<boolean>

    addSpender(spender: string): TransactionObject<void>

    removeSpender(spender: string): TransactionObject<void>

    transferGold(to: string, value: number | string): TransactionObject<boolean>

    transferExchangeGold(to: string, value: number | string): TransactionObject<boolean>

    getOrComputeTobinTax(): TransactionObject<{
      0: string
      1: string
    }>

    getTokens(): TransactionObject<string[]>

    getOtherReserveAddresses(): TransactionObject<string[]>

    getAssetAllocationSymbols(): TransactionObject<string[]>

    getAssetAllocationWeights(): TransactionObject<string[]>

    getUnfrozenBalance(): TransactionObject<string>

    getReserveGoldBalance(): TransactionObject<string>

    getOtherReserveAddressesGoldBalance(): TransactionObject<string>

    getUnfrozenReserveGoldBalance(): TransactionObject<string>

    getFrozenReserveGoldBalance(): TransactionObject<string>

    getReserveRatio(): TransactionObject<string>
  }
  events: {
    TobinTaxStalenessThresholdSet: ContractEvent<string>
    DailySpendingRatioSet: ContractEvent<string>
    TokenAdded: ContractEvent<string>
    TokenRemoved: ContractEvent<{
      token: string
      index: string
      0: string
      1: string
    }>
    SpenderAdded: ContractEvent<string>
    SpenderRemoved: ContractEvent<string>
    OtherReserveAddressAdded: ContractEvent<string>
    OtherReserveAddressRemoved: ContractEvent<{
      otherReserveAddress: string
      index: string
      0: string
      1: string
    }>
    AssetAllocationSet: ContractEvent<{
      symbols: string[]
      weights: string[]
      0: string[]
      1: string[]
    }>
    ReserveGoldTransferred: ContractEvent<{
      spender: string
      to: string
      value: string
      0: string
      1: string
      2: string
    }>
    TobinTaxSet: ContractEvent<string>
    TobinTaxReserveRatioSet: ContractEvent<string>
    RegistrySet: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [],
    name: 'frozenReserveGoldStartBalance',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'uint256' }],
    name: 'assetAllocationSymbols',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'isToken',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'tobinTaxCache',
    outputs: [
      { name: 'numerator', type: 'uint128' },
      { name: 'timestamp', type: 'uint128' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'spendingLimit',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'uint256' }],
    name: 'otherReserveAddresses',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'frozenReserveGoldDays',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'tobinTaxReserveRatio',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'isOtherReserveAddress',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'frozenReserveGoldStartDay',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'tobinTax',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'address' }],
    name: 'isSpender',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'tobinTaxStalenessThreshold',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: '', type: 'bytes32' }],
    name: 'assetAllocationWeights',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'lastSpendingDay',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'value', type: 'uint256' }],
    name: 'TobinTaxStalenessThresholdSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'ratio', type: 'uint256' }],
    name: 'DailySpendingRatioSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'token', type: 'address' }],
    name: 'TokenAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'token', type: 'address' },
      { indexed: false, name: 'index', type: 'uint256' },
    ],
    name: 'TokenRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'spender', type: 'address' }],
    name: 'SpenderAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'spender', type: 'address' }],
    name: 'SpenderRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'otherReserveAddress', type: 'address' }],
    name: 'OtherReserveAddressAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'otherReserveAddress', type: 'address' },
      { indexed: false, name: 'index', type: 'uint256' },
    ],
    name: 'OtherReserveAddressRemoved',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: 'symbols', type: 'bytes32[]' },
      { indexed: false, name: 'weights', type: 'uint256[]' },
    ],
    name: 'AssetAllocationSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'spender', type: 'address' },
      { indexed: true, name: 'to', type: 'address' },
      { indexed: false, name: 'value', type: 'uint256' },
    ],
    name: 'ReserveGoldTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'value', type: 'uint256' }],
    name: 'TobinTaxSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'value', type: 'uint256' }],
    name: 'TobinTaxReserveRatioSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
    name: 'RegistrySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    constant: false,
    inputs: [
      { name: 'registryAddress', type: 'address' },
      { name: '_tobinTaxStalenessThreshold', type: 'uint256' },
      { name: '_spendingRatio', type: 'uint256' },
      { name: '_frozenGold', type: 'uint256' },
      { name: '_frozenDays', type: 'uint256' },
      { name: '_assetAllocationSymbols', type: 'bytes32[]' },
      { name: '_assetAllocationWeights', type: 'uint256[]' },
      { name: '_tobinTax', type: 'uint256' },
      { name: '_tobinTaxReserveRatio', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'value', type: 'uint256' }],
    name: 'setTobinTaxStalenessThreshold',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'value', type: 'uint256' }],
    name: 'setTobinTax',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'value', type: 'uint256' }],
    name: 'setTobinTaxReserveRatio',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'ratio', type: 'uint256' }],
    name: 'setDailySpendingRatio',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getDailySpendingRatio',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'frozenGold', type: 'uint256' },
      { name: 'frozenDays', type: 'uint256' },
    ],
    name: 'setFrozenGold',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'symbols', type: 'bytes32[]' },
      { name: 'weights', type: 'uint256[]' },
    ],
    name: 'setAssetAllocations',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'token', type: 'address' }],
    name: 'addToken',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'token', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'removeToken',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'reserveAddress', type: 'address' }],
    name: 'addOtherReserveAddress',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'reserveAddress', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'removeOtherReserveAddress',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'spender', type: 'address' }],
    name: 'addSpender',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'spender', type: 'address' }],
    name: 'removeSpender',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'to', type: 'address' },
      { name: 'value', type: 'uint256' },
    ],
    name: 'transferGold',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'to', type: 'address' },
      { name: 'value', type: 'uint256' },
    ],
    name: 'transferExchangeGold',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'getOrComputeTobinTax',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getTokens',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getOtherReserveAddresses',
    outputs: [{ name: '', type: 'address[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getAssetAllocationSymbols',
    outputs: [{ name: '', type: 'bytes32[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getAssetAllocationWeights',
    outputs: [{ name: '', type: 'uint256[]' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getUnfrozenBalance',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getReserveGoldBalance',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getOtherReserveAddressesGoldBalance',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getUnfrozenReserveGoldBalance',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getFrozenReserveGoldBalance',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getReserveRatio',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
]

export function newReserve(web3: Web3, address: string): Reserve {
  return new web3.eth.Contract(ABI, address) as any
}
