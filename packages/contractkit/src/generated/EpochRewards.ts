/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { EventEmitter } from 'events'
import Web3 from 'web3'
import { EventLog } from 'web3-core'
import { Callback } from 'web3-core-helpers'
import { BlockType, TransactionObject } from 'web3-eth'
import { Contract } from 'web3-eth-contract'
import { AbiItem } from 'web3-utils'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

interface ContractEventLog<T> extends EventLog {
  returnValues: T
}

interface ContractEventEmitter<T> extends EventEmitter {
  on(event: 'connected', listener: (subscriptionId: string) => void): this
  on(event: 'data' | 'changed', listener: (event: ContractEventLog<T>) => void): this
  on(event: 'error', listener: (error: Error) => void): this
}

type ContractEvent<T> = (
  options?: EventOptions,
  cb?: Callback<ContractEventLog<T>>
) => ContractEventEmitter<T>

export interface EpochRewards extends Contract {
  clone(): EpochRewards
  methods: {
    validatorSignerAddressFromCurrentSet(index: number | string): TransactionObject<string>

    initialized(): TransactionObject<boolean>

    carbonOffsettingPartner(): TransactionObject<string>

    checkProofOfPossession(
      sender: string,
      blsKey: string | number[],
      blsPop: string | number[]
    ): TransactionObject<boolean>

    getEpochNumberOfBlock(blockNumber: number | string): TransactionObject<string>

    getVerifiedSealBitmapFromHeader(header: string | number[]): TransactionObject<string>

    validatorSignerAddressFromSet(
      index: number | string,
      blockNumber: number | string
    ): TransactionObject<string>

    hashHeader(header: string | number[]): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    minQuorumSizeInCurrentSet(): TransactionObject<string>

    startTime(): TransactionObject<string>

    registry(): TransactionObject<string>

    numberValidatorsInCurrentSet(): TransactionObject<string>

    getBlockNumberFromHeader(header: string | number[]): TransactionObject<string>

    owner(): TransactionObject<string>

    isOwner(): TransactionObject<boolean>

    getEpochNumber(): TransactionObject<string>

    numberValidatorsInSet(blockNumber: number | string): TransactionObject<string>

    setRegistry(registryAddress: string): TransactionObject<void>

    getEpochSize(): TransactionObject<string>

    targetValidatorEpochPayment(): TransactionObject<string>

    minQuorumSize(blockNumber: number | string): TransactionObject<string>

    fractionMulExp(
      aNumerator: number | string,
      aDenominator: number | string,
      bNumerator: number | string,
      bDenominator: number | string,
      exponent: number | string,
      _decimals: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    transferOwnership(newOwner: string): TransactionObject<void>

    getParentSealBitmap(blockNumber: number | string): TransactionObject<string>

    initialize(
      registryAddress: string,
      targetVotingYieldInitial: number | string,
      targetVotingYieldMax: number | string,
      targetVotingYieldAdjustmentFactor: number | string,
      rewardsMultiplierMax: number | string,
      rewardsMultiplierUnderspendAdjustmentFactor: number | string,
      rewardsMultiplierOverspendAdjustmentFactor: number | string,
      _targetVotingGoldFraction: number | string,
      _targetValidatorEpochPayment: number | string,
      _communityRewardFraction: number | string,
      _carbonOffsettingPartner: string,
      _carbonOffsettingFraction: number | string
    ): TransactionObject<void>

    getTargetVotingYieldParameters(): TransactionObject<{
      0: string
      1: string
      2: string
    }>

    getRewardsMultiplierParameters(): TransactionObject<{
      0: string
      1: string
      2: string
    }>

    setCommunityRewardFraction(value: number | string): TransactionObject<boolean>

    getCommunityRewardFraction(): TransactionObject<string>

    setCarbonOffsettingFund(partner: string, value: number | string): TransactionObject<boolean>

    getCarbonOffsettingFraction(): TransactionObject<string>

    setTargetVotingGoldFraction(value: number | string): TransactionObject<boolean>

    getTargetVotingGoldFraction(): TransactionObject<string>

    setTargetValidatorEpochPayment(value: number | string): TransactionObject<boolean>

    setRewardsMultiplierParameters(
      max: number | string,
      underspendAdjustmentFactor: number | string,
      overspendAdjustmentFactor: number | string
    ): TransactionObject<boolean>

    setTargetVotingYieldParameters(
      max: number | string,
      adjustmentFactor: number | string
    ): TransactionObject<boolean>

    setTargetVotingYield(targetVotingYield: number | string): TransactionObject<boolean>

    getTargetGoldTotalSupply(): TransactionObject<string>

    getTargetVoterRewards(): TransactionObject<string>

    getTargetTotalEpochPaymentsInGold(): TransactionObject<string>

    getRewardsMultiplier(): TransactionObject<string>

    getVotingGoldFraction(): TransactionObject<string>

    updateTargetVotingYield(): TransactionObject<void>

    isReserveLow(): TransactionObject<boolean>

    calculateTargetEpochRewards(): TransactionObject<{
      0: string
      1: string
      2: string
      3: string
    }>
  }
  events: {
    TargetVotingGoldFractionSet: ContractEvent<string>
    CommunityRewardFractionSet: ContractEvent<string>
    CarbonOffsettingFundSet: ContractEvent<{
      partner: string
      fraction: string
      0: string
      1: string
    }>
    TargetValidatorEpochPaymentSet: ContractEvent<string>
    TargetVotingYieldParametersSet: ContractEvent<{
      max: string
      adjustmentFactor: string
      0: string
      1: string
    }>
    TargetVotingYieldSet: ContractEvent<string>
    RewardsMultiplierParametersSet: ContractEvent<{
      max: string
      underspendAdjustmentFactor: string
      overspendAdjustmentFactor: string
      0: string
      1: string
      2: string
    }>
    TargetVotingYieldUpdated: ContractEvent<string>
    RegistrySet: ContractEvent<string>
    OwnershipTransferred: ContractEvent<{
      previousOwner: string
      newOwner: string
      0: string
      1: string
    }>
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
  }
}
export const ABI: AbiItem[] = [
  {
    constant: true,
    inputs: [{ name: 'index', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'carbonOffsettingPartner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'blsKey', type: 'bytes' },
      { name: 'blsPop', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'index', type: 'uint256' },
      { name: 'blockNumber', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'startTime',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'header', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', type: 'address' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'registryAddress', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'targetValidatorEpochPayment',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [
      { name: 'aNumerator', type: 'uint256' },
      { name: 'aDenominator', type: 'uint256' },
      { name: 'bNumerator', type: 'uint256' },
      { name: 'bDenominator', type: 'uint256' },
      { name: 'exponent', type: 'uint256' },
      { name: '_decimals', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'newOwner', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [{ name: 'blockNumber', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', type: 'bytes32' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'fraction', type: 'uint256' }],
    name: 'TargetVotingGoldFractionSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'fraction', type: 'uint256' }],
    name: 'CommunityRewardFractionSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'partner', type: 'address' },
      { indexed: false, name: 'fraction', type: 'uint256' },
    ],
    name: 'CarbonOffsettingFundSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'payment', type: 'uint256' }],
    name: 'TargetValidatorEpochPaymentSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: 'max', type: 'uint256' },
      { indexed: false, name: 'adjustmentFactor', type: 'uint256' },
    ],
    name: 'TargetVotingYieldParametersSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'target', type: 'uint256' }],
    name: 'TargetVotingYieldSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: false, name: 'max', type: 'uint256' },
      { indexed: false, name: 'underspendAdjustmentFactor', type: 'uint256' },
      { indexed: false, name: 'overspendAdjustmentFactor', type: 'uint256' },
    ],
    name: 'RewardsMultiplierParametersSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: false, name: 'fraction', type: 'uint256' }],
    name: 'TargetVotingYieldUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, name: 'registryAddress', type: 'address' }],
    name: 'RegistrySet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      { indexed: true, name: 'previousOwner', type: 'address' },
      { indexed: true, name: 'newOwner', type: 'address' },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    constant: false,
    inputs: [
      { name: 'registryAddress', type: 'address' },
      { name: 'targetVotingYieldInitial', type: 'uint256' },
      { name: 'targetVotingYieldMax', type: 'uint256' },
      { name: 'targetVotingYieldAdjustmentFactor', type: 'uint256' },
      { name: 'rewardsMultiplierMax', type: 'uint256' },
      { name: 'rewardsMultiplierUnderspendAdjustmentFactor', type: 'uint256' },
      { name: 'rewardsMultiplierOverspendAdjustmentFactor', type: 'uint256' },
      { name: '_targetVotingGoldFraction', type: 'uint256' },
      { name: '_targetValidatorEpochPayment', type: 'uint256' },
      { name: '_communityRewardFraction', type: 'uint256' },
      { name: '_carbonOffsettingPartner', type: 'address' },
      { name: '_carbonOffsettingFraction', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getTargetVotingYieldParameters',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getRewardsMultiplierParameters',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'value', type: 'uint256' }],
    name: 'setCommunityRewardFraction',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getCommunityRewardFraction',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'partner', type: 'address' },
      { name: 'value', type: 'uint256' },
    ],
    name: 'setCarbonOffsettingFund',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getCarbonOffsettingFraction',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'value', type: 'uint256' }],
    name: 'setTargetVotingGoldFraction',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getTargetVotingGoldFraction',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'value', type: 'uint256' }],
    name: 'setTargetValidatorEpochPayment',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'max', type: 'uint256' },
      { name: 'underspendAdjustmentFactor', type: 'uint256' },
      { name: 'overspendAdjustmentFactor', type: 'uint256' },
    ],
    name: 'setRewardsMultiplierParameters',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [
      { name: 'max', type: 'uint256' },
      { name: 'adjustmentFactor', type: 'uint256' },
    ],
    name: 'setTargetVotingYieldParameters',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: false,
    inputs: [{ name: 'targetVotingYield', type: 'uint256' }],
    name: 'setTargetVotingYield',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getTargetGoldTotalSupply',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getTargetVoterRewards',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getTargetTotalEpochPaymentsInGold',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getRewardsMultiplier',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'getVotingGoldFraction',
    outputs: [{ name: '', type: 'uint256' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: false,
    inputs: [],
    name: 'updateTargetVotingYield',
    outputs: [],
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'isReserveLow',
    outputs: [{ name: '', type: 'bool' }],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
  {
    constant: true,
    inputs: [],
    name: 'calculateTargetEpochRewards',
    outputs: [
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
      { name: '', type: 'uint256' },
    ],
    payable: false,
    stateMutability: 'view',
    type: 'function',
  },
]

export function newEpochRewards(web3: Web3, address: string): EpochRewards {
  return new web3.eth.Contract(ABI, address) as any
}
