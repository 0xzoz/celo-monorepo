/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class Accounts extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    authorizedBy(arg0: string): TransactionObject<string>

    attestationSignerToAccount(signer: string): TransactionObject<string>

    validatorSignerToAccount(signer: string): TransactionObject<string>

    voteSignerToAccount(signer: string): TransactionObject<string>

    signerToAccount(signer: string): TransactionObject<string>

    getVoteSigner(account: string): TransactionObject<string>

    getValidatorSigner(account: string): TransactionObject<string>

    getAttestationSigner(account: string): TransactionObject<string>

    hasAuthorizedVoteSigner(account: string): TransactionObject<boolean>

    hasAuthorizedValidatorSigner(account: string): TransactionObject<boolean>

    hasAuthorizedAttestationSigner(account: string): TransactionObject<boolean>

    getName(account: string): TransactionObject<string>

    getMetadataURL(account: string): TransactionObject<string>

    batchGetMetadataURL(
      accountsToQuery: string[]
    ): TransactionObject<{
      0: string[]
      1: string[]
    }>

    getDataEncryptionKey(account: string): TransactionObject<string[]>

    getWalletAddress(account: string): TransactionObject<string>

    isAccount(account: string): TransactionObject<boolean>

    isAuthorizedSigner(signer: string): TransactionObject<boolean>

    renounceOwnership(): TransactionObject<void>

    setRegistry(registryAddress: string): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>

    initialize(registryAddress: string): TransactionObject<void>

    setAccount(
      name: string,
      dataEncryptionKey: (string | number[])[],
      walletAddress: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    createAccount(): TransactionObject<boolean>

    setName(name: string): TransactionObject<void>

    setWalletAddress(
      walletAddress: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    setAccountDataEncryptionKey(dataEncryptionKey: (string | number[])[]): TransactionObject<void>

    setMetadataURL(metadataURL: string): TransactionObject<void>

    authorizeVoteSigner(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    authorizeValidatorSigner(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    authorizeValidatorSignerWithPublicKey(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[],
      ecdsaPublicKey: (string | number[])[]
    ): TransactionObject<void>

    authorizeValidatorSignerWithKeys(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[],
      ecdsaPublicKey: (string | number[])[],
      blsPublicKey: (string | number[])[],
      blsPop: (string | number[])[]
    ): TransactionObject<void>

    authorizeAttestationSigner(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    removeVoteSigner(): TransactionObject<void>

    removeValidatorSigner(): TransactionObject<void>

    removeAttestationSigner(): TransactionObject<void>

    initialized(): TransactionObject<boolean>
    registry(): TransactionObject<string>
    owner(): TransactionObject<string>
    isOwner(): TransactionObject<boolean>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    AttestationSignerAuthorized(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    VoteSignerAuthorized(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorSignerAuthorized(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    AttestationSignerRemoved(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    VoteSignerRemoved(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorSignerRemoved(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    AccountDataEncryptionKeySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    AccountNameSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    AccountMetadataURLSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    AccountWalletAddressSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    AccountCreated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    RegistrySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OwnershipTransferred(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): Accounts
}
