/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class IReleaseGold extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    withdraw(arg0: number | string): TransactionObject<void>

    refundAndFinalize(): TransactionObject<void>

    revoke(): TransactionObject<void>

    lockGold(arg0: number | string): TransactionObject<void>

    unlockGold(arg0: number | string): TransactionObject<void>

    relockGold(arg0: number | string, arg1: number | string): TransactionObject<void>

    withdrawLockedGold(arg0: number | string): TransactionObject<void>

    authorizeVoteSigner(
      arg0: string,
      arg1: number | string,
      arg2: string | number[],
      arg3: string | number[]
    ): TransactionObject<void>

    createAccount(): TransactionObject<void>

    setAccount(
      arg0: string,
      arg1: (string | number[])[],
      arg2: string,
      arg3: number | string,
      arg4: string | number[],
      arg5: string | number[]
    ): TransactionObject<void>

    setAccountName(arg0: string): TransactionObject<void>

    setAccountWalletAddress(
      arg0: string,
      arg1: number | string,
      arg2: string | number[],
      arg3: string | number[]
    ): TransactionObject<void>

    setAccountDataEncryptionKey(arg0: (string | number[])[]): TransactionObject<void>

    setAccountMetadataURL(arg0: string): TransactionObject<void>

    revokeActive(
      arg0: string,
      arg1: number | string,
      arg2: string,
      arg3: string,
      arg4: number | string
    ): TransactionObject<void>

    revokePending(
      arg0: string,
      arg1: number | string,
      arg2: string,
      arg3: string,
      arg4: number | string
    ): TransactionObject<void>

    isRevoked(): TransactionObject<boolean>
    getTotalBalance(): TransactionObject<string>
    getRemainingTotalBalance(): TransactionObject<string>
    getRemainingUnlockedBalance(): TransactionObject<string>
    getRemainingLockedBalance(): TransactionObject<string>
    getCurrentReleasedTotalAmount(): TransactionObject<string>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): IReleaseGold
}
