/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class TestDowntimeSlasher extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    slashingIncentives(): TransactionObject<{
      penalty: string
      reward: string
      0: string
      1: string
    }>

    validatorSignerAddressFromCurrentSet(index: number | string): TransactionObject<string>

    checkProofOfPossession(
      sender: string,
      blsKey: (string | number[])[],
      blsPop: (string | number[])[]
    ): TransactionObject<boolean>

    getEpochNumberOfBlock(blockNumber: number | string): TransactionObject<string>

    getVerifiedSealBitmapFromHeader(header: (string | number[])[]): TransactionObject<string>

    validatorSignerAddressFromSet(
      index: number | string,
      blockNumber: number | string
    ): TransactionObject<string>

    hashHeader(header: (string | number[])[]): TransactionObject<string>

    isDown(
      startBlock: number | string,
      startSignerIndex: number | string,
      endSignerIndex: number | string
    ): TransactionObject<boolean>

    groupMembershipAtBlock(
      validator: string,
      blockNumber: number | string,
      groupMembershipHistoryIndex: number | string
    ): TransactionObject<string>

    getBlockNumberFromHeader(header: (string | number[])[]): TransactionObject<string>

    numberValidatorsInSet(arg0: number | string): TransactionObject<string>

    minQuorumSize(blockNumber: number | string): TransactionObject<string>

    fractionMulExp(
      aNumerator: number | string,
      aDenominator: number | string,
      bNumerator: number | string,
      bDenominator: number | string,
      exponent: number | string,
      _decimals: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    getParentSealBitmap(blockNumber: number | string): TransactionObject<string>

    setNumberValidators(num: number | string): TransactionObject<void>

    setVerifiedSealBitmap(
      header: (string | number[])[],
      bitmap: string | number[]
    ): TransactionObject<void>

    setSlashableDowntime(interval: number | string): TransactionObject<void>

    initialize(
      registryAddress: string,
      _penalty: number | string,
      _reward: number | string,
      _slashableDowntime: number | string
    ): TransactionObject<void>

    setParentSealBitmap(
      blockNumber: number | string,
      bitmap: string | number[]
    ): TransactionObject<void>

    renounceOwnership(): TransactionObject<void>

    setBlockNumber(
      header: (string | number[])[],
      number: number | string
    ): TransactionObject<string>

    setRegistry(registryAddress: string): TransactionObject<void>

    setSlashingIncentives(
      penalty: number | string,
      reward: number | string
    ): TransactionObject<void>

    setEpochSigner(
      epoch: number | string,
      index: number | string,
      signer: string
    ): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>

    slash(
      startBlock: number | string,
      startSignerIndex: number | string,
      endSignerIndex: number | string,
      groupMembershipHistoryIndex: number | string,
      validatorElectionLessers: string[],
      validatorElectionGreaters: string[],
      validatorElectionIndices: (number | string)[],
      groupElectionLessers: string[],
      groupElectionGreaters: string[],
      groupElectionIndices: (number | string)[]
    ): TransactionObject<void>

    initialized(): TransactionObject<boolean>
    slashableDowntime(): TransactionObject<string>
    minQuorumSizeInCurrentSet(): TransactionObject<string>
    registry(): TransactionObject<string>
    numberValidatorsInCurrentSet(): TransactionObject<string>
    owner(): TransactionObject<string>
    isOwner(): TransactionObject<boolean>
    getEpochNumber(): TransactionObject<string>
    getEpochSize(): TransactionObject<string>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    SlashableDowntimeSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    SlashingIncentivesSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    RegistrySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OwnershipTransferred(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): TestDowntimeSlasher
}
