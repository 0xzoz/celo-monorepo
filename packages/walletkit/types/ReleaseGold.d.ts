/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class ReleaseGold extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    revocationInfo(): TransactionObject<{
      revocable: boolean
      canExpire: boolean
      releasedBalanceAtRevoke: string
      revokeTime: string
      0: boolean
      1: boolean
      2: string
      3: string
    }>

    releaseSchedule(): TransactionObject<{
      releaseStartTime: string
      releaseCliff: string
      numReleasePeriods: string
      releasePeriod: string
      amountReleasedPerPeriod: string
      0: string
      1: string
      2: string
      3: string
      4: string
    }>

    renounceOwnership(): TransactionObject<void>

    setRegistry(registryAddress: string): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>

    transfer(to: string, value: number | string): TransactionObject<void>

    initialize(
      releaseStartTime: number | string,
      releaseCliffTime: number | string,
      numReleasePeriods: number | string,
      releasePeriod: number | string,
      amountReleasedPerPeriod: number | string,
      revocable: boolean,
      _beneficiary: string,
      _releaseOwner: string,
      _refundAddress: string,
      subjectToLiquidityProvision: boolean,
      initialDistributionRatio: number | string,
      _canValidate: boolean,
      _canVote: boolean,
      registryAddress: string
    ): TransactionObject<void>

    setLiquidityProvision(): TransactionObject<void>

    setCanExpire(_canExpire: boolean): TransactionObject<void>

    setMaxDistribution(distributionRatio: number | string): TransactionObject<void>

    setBeneficiary(newBeneficiary: string): TransactionObject<void>

    withdraw(amount: number | string): TransactionObject<void>

    refundAndFinalize(): TransactionObject<void>

    revoke(): TransactionObject<void>

    expire(): TransactionObject<void>

    lockGold(value: number | string): TransactionObject<void>

    unlockGold(value: number | string): TransactionObject<void>

    relockGold(index: number | string, value: number | string): TransactionObject<void>

    withdrawLockedGold(index: number | string): TransactionObject<void>

    authorizeVoteSigner(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    authorizeValidatorSigner(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    authorizeValidatorSignerWithPublicKey(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[],
      ecdsaPublicKey: (string | number[])[]
    ): TransactionObject<void>

    authorizeValidatorSignerWithKeys(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[],
      ecdsaPublicKey: (string | number[])[],
      blsPublicKey: (string | number[])[],
      blsPop: (string | number[])[]
    ): TransactionObject<void>

    authorizeAttestationSigner(
      signer: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    setAccount(
      name: string,
      dataEncryptionKey: (string | number[])[],
      walletAddress: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    createAccount(): TransactionObject<void>

    setAccountName(name: string): TransactionObject<void>

    setAccountWalletAddress(
      walletAddress: string,
      v: number | string,
      r: string | number[],
      s: string | number[]
    ): TransactionObject<void>

    setAccountDataEncryptionKey(dataEncryptionKey: (string | number[])[]): TransactionObject<void>

    setAccountMetadataURL(metadataURL: string): TransactionObject<void>

    revokeActive(
      group: string,
      value: number | string,
      lesser: string,
      greater: string,
      index: number | string
    ): TransactionObject<void>

    revokePending(
      group: string,
      value: number | string,
      lesser: string,
      greater: string,
      index: number | string
    ): TransactionObject<void>

    maxDistribution(): TransactionObject<string>
    refundAddress(): TransactionObject<string>
    initialized(): TransactionObject<boolean>
    canVote(): TransactionObject<boolean>
    beneficiary(): TransactionObject<string>
    EXPIRATION_TIME(): TransactionObject<string>
    totalWithdrawn(): TransactionObject<string>
    registry(): TransactionObject<string>
    releaseOwner(): TransactionObject<string>
    owner(): TransactionObject<string>
    isOwner(): TransactionObject<boolean>
    liquidityProvisionMet(): TransactionObject<boolean>
    canValidate(): TransactionObject<boolean>
    isRevoked(): TransactionObject<boolean>
    getTotalBalance(): TransactionObject<string>
    getRemainingTotalBalance(): TransactionObject<string>
    getRemainingUnlockedBalance(): TransactionObject<string>
    getRemainingLockedBalance(): TransactionObject<string>
    getCurrentReleasedTotalAmount(): TransactionObject<string>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    ReleaseGoldInstanceCreated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ReleaseScheduleRevoked(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ReleaseGoldInstanceDestroyed(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    DistributionLimitSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    LiquidityProvisionSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    CanExpireSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    BeneficiarySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    RegistrySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OwnershipTransferred(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): ReleaseGold
}
