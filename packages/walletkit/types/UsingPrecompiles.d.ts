/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class UsingPrecompiles extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    fractionMulExp(
      aNumerator: number | string,
      aDenominator: number | string,
      bNumerator: number | string,
      bDenominator: number | string,
      exponent: number | string,
      _decimals: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    getEpochNumberOfBlock(blockNumber: number | string): TransactionObject<string>

    validatorSignerAddressFromCurrentSet(index: number | string): TransactionObject<string>

    validatorSignerAddressFromSet(
      index: number | string,
      blockNumber: number | string
    ): TransactionObject<string>

    numberValidatorsInSet(blockNumber: number | string): TransactionObject<string>

    checkProofOfPossession(
      sender: string,
      blsKey: (string | number[])[],
      blsPop: (string | number[])[]
    ): TransactionObject<boolean>

    getBlockNumberFromHeader(header: (string | number[])[]): TransactionObject<string>

    hashHeader(header: (string | number[])[]): TransactionObject<string>

    getParentSealBitmap(blockNumber: number | string): TransactionObject<string>

    getVerifiedSealBitmapFromHeader(header: (string | number[])[]): TransactionObject<string>

    minQuorumSize(blockNumber: number | string): TransactionObject<string>

    getEpochSize(): TransactionObject<string>
    getEpochNumber(): TransactionObject<string>
    numberValidatorsInCurrentSet(): TransactionObject<string>
    minQuorumSizeInCurrentSet(): TransactionObject<string>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): UsingPrecompiles
}
