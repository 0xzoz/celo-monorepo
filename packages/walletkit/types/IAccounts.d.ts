/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class IAccounts extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    isAccount(arg0: string): TransactionObject<boolean>

    voteSignerToAccount(arg0: string): TransactionObject<string>

    validatorSignerToAccount(arg0: string): TransactionObject<string>

    attestationSignerToAccount(arg0: string): TransactionObject<string>

    signerToAccount(arg0: string): TransactionObject<string>

    getAttestationSigner(arg0: string): TransactionObject<string>

    getValidatorSigner(arg0: string): TransactionObject<string>

    getVoteSigner(arg0: string): TransactionObject<string>

    hasAuthorizedVoteSigner(arg0: string): TransactionObject<boolean>

    hasAuthorizedValidatorSigner(arg0: string): TransactionObject<boolean>

    hasAuthorizedAttestationSigner(arg0: string): TransactionObject<boolean>

    getDataEncryptionKey(arg0: string): TransactionObject<string[]>

    getWalletAddress(arg0: string): TransactionObject<string>

    getMetadataURL(arg0: string): TransactionObject<string>

    batchGetMetadataURL(
      arg0: string[]
    ): TransactionObject<{
      0: string[]
      1: string[]
    }>

    getName(arg0: string): TransactionObject<string>

    setAccountDataEncryptionKey(arg0: (string | number[])[]): TransactionObject<void>

    setMetadataURL(arg0: string): TransactionObject<void>

    setName(arg0: string): TransactionObject<void>

    setWalletAddress(
      arg0: string,
      arg1: number | string,
      arg2: string | number[],
      arg3: string | number[]
    ): TransactionObject<void>

    setAccount(
      arg0: string,
      arg1: (string | number[])[],
      arg2: string,
      arg3: number | string,
      arg4: string | number[],
      arg5: string | number[]
    ): TransactionObject<void>

    authorizeVoteSigner(
      arg0: string,
      arg1: number | string,
      arg2: string | number[],
      arg3: string | number[]
    ): TransactionObject<void>

    authorizeValidatorSigner(
      arg0: string,
      arg1: number | string,
      arg2: string | number[],
      arg3: string | number[]
    ): TransactionObject<void>

    authorizeValidatorSignerWithPublicKey(
      arg0: string,
      arg1: number | string,
      arg2: string | number[],
      arg3: string | number[],
      arg4: (string | number[])[]
    ): TransactionObject<void>

    authorizeValidatorSignerWithKeys(
      arg0: string,
      arg1: number | string,
      arg2: string | number[],
      arg3: string | number[],
      arg4: (string | number[])[],
      arg5: (string | number[])[],
      arg6: (string | number[])[]
    ): TransactionObject<void>

    authorizeAttestationSigner(
      arg0: string,
      arg1: number | string,
      arg2: string | number[],
      arg3: string | number[]
    ): TransactionObject<void>

    createAccount(): TransactionObject<boolean>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): IAccounts
}
