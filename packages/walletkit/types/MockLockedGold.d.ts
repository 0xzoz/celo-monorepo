/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class MockLockedGold extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    slashingWhitelist(arg0: string): TransactionObject<boolean>

    accountTotalLockedGold(arg0: string): TransactionObject<string>

    authorizedValidators(arg0: string): TransactionObject<string>

    authorizedBy(arg0: string): TransactionObject<string>

    nonvotingAccountBalance(arg0: string): TransactionObject<string>

    getAccountTotalLockedGold(account: string): TransactionObject<string>

    isSlasher(slasher: string): TransactionObject<boolean>

    getPendingWithdrawals(
      arg0: string
    ): TransactionObject<{
      0: string[]
      1: string[]
    }>

    getTotalPendingWithdrawals(arg0: string): TransactionObject<string>

    incrementNonvotingAccountBalance(
      account: string,
      value: number | string
    ): TransactionObject<void>

    decrementNonvotingAccountBalance(
      account: string,
      value: number | string
    ): TransactionObject<void>

    setAccountTotalLockedGold(account: string, value: number | string): TransactionObject<void>

    setTotalLockedGold(value: number | string): TransactionObject<void>

    lock(): TransactionObject<void>

    unlock(value: number | string): TransactionObject<void>

    relock(index: number | string, value: number | string): TransactionObject<void>

    withdraw(index: number | string): TransactionObject<void>

    slash(
      account: string,
      penalty: number | string,
      arg2: string,
      arg3: number | string,
      arg4: string[],
      arg5: string[],
      arg6: (number | string)[]
    ): TransactionObject<void>

    addSlasher(slasher: string): TransactionObject<void>

    removeSlasher(slasher: string): TransactionObject<void>

    getTotalLockedGold(): TransactionObject<string>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): MockLockedGold
}
