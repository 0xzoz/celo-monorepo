/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class MockValidators extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    isValidatorGroup(arg0: string): TransactionObject<boolean>

    isValidator(arg0: string): TransactionObject<boolean>

    meetsAccountLockedGoldRequirements(account: string): TransactionObject<boolean>

    getGroupNumMembers(group: string): TransactionObject<string>

    getAccountLockedGoldRequirement(account: string): TransactionObject<string>

    calculateGroupEpochScore(uptimes: (number | string)[]): TransactionObject<string>

    getTopGroupValidators(group: string, n: number | string): TransactionObject<string[]>

    getGroupsNumMembers(groups: string[]): TransactionObject<string[]>

    groupMembershipInEpoch(
      addr: string,
      arg1: number | string,
      arg2: number | string
    ): TransactionObject<string>

    getValidatorGroupSlashingMultiplier(arg0: string): TransactionObject<string>

    updateEcdsaPublicKey(
      arg0: string,
      arg1: string,
      arg2: (string | number[])[]
    ): TransactionObject<boolean>

    updatePublicKeys(
      arg0: string,
      arg1: string,
      arg2: (string | number[])[],
      arg3: (string | number[])[],
      arg4: (string | number[])[]
    ): TransactionObject<boolean>

    setValidator(account: string): TransactionObject<void>

    setValidatorGroup(group: string): TransactionObject<void>

    affiliate(group: string): TransactionObject<boolean>

    setDoesNotMeetAccountLockedGoldRequirements(account: string): TransactionObject<void>

    setNumRegisteredValidators(value: number | string): TransactionObject<void>

    setMembers(group: string, _members: string[]): TransactionObject<void>

    setAccountLockedGoldRequirement(
      account: string,
      value: number | string
    ): TransactionObject<void>

    halveSlashingMultiplier(arg0: string): TransactionObject<void>

    forceDeaffiliateIfValidator(validator: string): TransactionObject<void>

    getNumRegisteredValidators(): TransactionObject<string>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): MockValidators
}
