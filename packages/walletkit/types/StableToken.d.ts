/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class StableToken extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    validatorSignerAddressFromCurrentSet(index: number | string): TransactionObject<string>

    checkProofOfPossession(
      sender: string,
      blsKey: (string | number[])[],
      blsPop: (string | number[])[]
    ): TransactionObject<boolean>

    getEpochNumberOfBlock(blockNumber: number | string): TransactionObject<string>

    getVerifiedSealBitmapFromHeader(header: (string | number[])[]): TransactionObject<string>

    validatorSignerAddressFromSet(
      index: number | string,
      blockNumber: number | string
    ): TransactionObject<string>

    hashHeader(header: (string | number[])[]): TransactionObject<string>

    getBlockNumberFromHeader(header: (string | number[])[]): TransactionObject<string>

    numberValidatorsInSet(blockNumber: number | string): TransactionObject<string>

    minQuorumSize(blockNumber: number | string): TransactionObject<string>

    fractionMulExp(
      aNumerator: number | string,
      aDenominator: number | string,
      bNumerator: number | string,
      bDenominator: number | string,
      exponent: number | string,
      _decimals: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    getParentSealBitmap(blockNumber: number | string): TransactionObject<string>

    allowance(accountOwner: string, spender: string): TransactionObject<string>

    balanceOf(accountOwner: string): TransactionObject<string>

    getInflationParameters(): TransactionObject<{
      0: string
      1: string
      2: string
      3: string
    }>

    valueToUnits(value: number | string): TransactionObject<string>

    unitsToValue(units: number | string): TransactionObject<string>

    renounceOwnership(): TransactionObject<void>

    setRegistry(registryAddress: string): TransactionObject<void>

    transferOwnership(newOwner: string): TransactionObject<void>

    initialize(
      _name: string,
      _symbol: string,
      _decimals: number | string,
      registryAddress: string,
      inflationRate: number | string,
      inflationFactorUpdatePeriod: number | string,
      initialBalanceAddresses: string[],
      initialBalanceValues: (number | string)[]
    ): TransactionObject<void>

    setInflationParameters(
      rate: number | string,
      updatePeriod: number | string
    ): TransactionObject<void>

    increaseAllowance(spender: string, value: number | string): TransactionObject<boolean>

    decreaseAllowance(spender: string, value: number | string): TransactionObject<boolean>

    approve(spender: string, value: number | string): TransactionObject<boolean>

    mint(to: string, value: number | string): TransactionObject<boolean>

    transferWithComment(
      to: string,
      value: number | string,
      comment: string
    ): TransactionObject<boolean>

    burn(value: number | string): TransactionObject<boolean>

    transferFrom(from: string, to: string, value: number | string): TransactionObject<boolean>

    transfer(to: string, value: number | string): TransactionObject<boolean>

    debitGasFees(from: string, value: number | string): TransactionObject<void>

    creditGasFees(
      from: string,
      feeRecipient: string,
      gatewayFeeRecipient: string,
      communityFund: string,
      refund: number | string,
      tipTxFee: number | string,
      gatewayFee: number | string,
      baseTxFee: number | string
    ): TransactionObject<void>

    initialized(): TransactionObject<boolean>
    minQuorumSizeInCurrentSet(): TransactionObject<string>
    registry(): TransactionObject<string>
    numberValidatorsInCurrentSet(): TransactionObject<string>
    owner(): TransactionObject<string>
    isOwner(): TransactionObject<boolean>
    getEpochNumber(): TransactionObject<string>
    getEpochSize(): TransactionObject<string>
    name(): TransactionObject<string>
    symbol(): TransactionObject<string>
    decimals(): TransactionObject<string>
    totalSupply(): TransactionObject<string>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    InflationFactorUpdated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    InflationParametersUpdated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    Transfer(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    TransferComment(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    Approval(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    RegistrySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OwnershipTransferred(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): StableToken
}
