name: contracts-release

# on:
#   workflow_dispatch:
#     inputs:
#       release_version:
#         description: 'Version number of the release to be deployed'
#         required: true
#       network:
#         description: 'Network to deploy core contracts release on'
#         required: true

on: push
env:
  NETWORK: alfajores
  VERSION: 5
# env:
#   NETWORK: ${{ github.event.inputs.network }}
#   VERSION: ${{ github.event.inputs.release_version }}


jobs:
  core_contracts_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # all history

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      - name: yarn
        run: |
          npm install --global yarn
          yarn
          yarn lerna bootstrap

      - name: Build packages
        run: yarn lerna run build --ignore docs
      
      - name: Get branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: get_branch

      - name: Verify previous release
        run: |
          export OLD_BRANCH=core-contracts.v$((${{ env.VERSION }}-1))
          cd packages/protocol && yarn run verify-deployed -b $OLD_BRANCH -n ${{ env.NETWORK }} -f;

      - name: Verify version compatibility
        run: |
          OLD_BRANCH=core-contracts.v$((${{ env.VERSION }}-1))
          NEW_BRANCH=${{ steps.get_branch.outputs.branch }}
          cd packages/protocol && yarn run check-versions -a $OLD_BRANCH -b $NEW_BRANCH -r report.json;

      - name: Make release
        run: |
          NEW_BRANCH=${{ steps.get_branch.outputs.branch }}
          cd packages/protocol && yarn run make-release -b $NEW_BRANCH -n ${{ env.NETWORK }} -p proposal.json -r report.json -i ./releaseData/initializationData/release${{ env.VERSION }}.json -l libraries.json -z -f "${{ secrets.ALFAJORES_MNEMONIC }}";
